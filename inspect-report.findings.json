{"findings": [{"app": "kubernetes-goat", "type": "extscan", "title": "Security Misconfiguration with the config `PREFERRED_URL_SCHEME` not set to the recommended value `https` for production use.", "description": "Flask application is not configured correctly for deployment to production and live environments. Default settings that are more appropriate for development environment are in use.\n\n## Additional information\n\n**[OWASP-A6](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration)**\n\n**[Flask Security](https://flask-security.readthedocs.io/en/develop/configuration.html)**\n\n**[Flask Security Considerations](https://flask.palletsprojects.com/en/1.1.x/security/#security-considerations)**\n\n**[Flask Configuration](https://flask.palletsprojects.com/en/1.1.x/api/#configuration)**\n", "internal_id": "flask-misconfiguration-recommended/a05e8b6d126d76cde5ce0ce8c6b91ffe", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Security Misconfiguration", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Security Misconfiguration with the config `PREFERRED_URL_SCHEME` not set to the recommended value `https` for production use.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/infrastructure/info-app/app.py", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "flask-misconfiguration-recommended", "ruleName": "Security Misconfiguration", "contextText": "from flask import Flask\n", "snippetText": "from flask import Flask\n\napp = Flask(__name__)\n\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Security Misconfiguration with the config `SESSION_COOKIE_SECURE` not set to the recommended value `True` for production use.", "description": "Flask application is not configured correctly for deployment to production and live environments. Default settings that are more appropriate for development environment are in use.\n\n## Additional information\n\n**[OWASP-A6](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration)**\n\n**[Flask Security](https://flask-security.readthedocs.io/en/develop/configuration.html)**\n\n**[Flask Security Considerations](https://flask.palletsprojects.com/en/1.1.x/security/#security-considerations)**\n\n**[Flask Configuration](https://flask.palletsprojects.com/en/1.1.x/api/#configuration)**\n", "internal_id": "flask-misconfiguration-recommended/a05e8b6d126d76cde5ce0ce8c6b91ffe", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Security Misconfiguration", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Security Misconfiguration with the config `SESSION_COOKIE_SECURE` not set to the recommended value `True` for production use.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/infrastructure/info-app/app.py", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "flask-misconfiguration-recommended", "ruleName": "Security Misconfiguration", "contextText": "from flask import Flask\n", "snippetText": "from flask import Flask\n\napp = Flask(__name__)\n\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Consider adding Flask-Security and Flask-Talisman security extensions to your Flask apps.", "description": "Flask-Security allows you to quickly add common security mechanisms to your Flask application. Flask-Social can also be used to add social or OAuth login and connection management.\n\n## Additional information\n\n**[OWASP-A6](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration)**\n\n**[Flask Security](https://flask-security.readthedocs.io/en/develop/index.html)**\n\n**[Flask Configuration](https://flask.palletsprojects.com/en/1.1.x/api/#configuration)**\n\n**[Flask Talisman](https://github.com/GoogleCloudPlatform/flask-talisman)**\n", "internal_id": "flask-misconfiguration-controls/a05e8b6d126d76cde5ce0ce8c6b91ffe", "severity": "info", "owasp_category": "a6-misconfiguration", "category": "Missing Security Controls", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Consider adding Flask-Security and Flask-Talisman security extensions to your Flask apps.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/infrastructure/info-app/app.py", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "flask-misconfiguration-controls", "ruleName": "Missing Security Controls", "contextText": "from flask import Flask\n", "snippetText": "from flask import Flask\n\napp = Flask(__name__)\n\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Untrusted User Input in Response will result in Reflected Cross Site Scripting Vulnerability.", "description": "Untrusted User Input in Response will result in Reflected Cross Site Scripting Vulnerability.", "internal_id": "a1-injection/495d0143d1740409a7d6df226496c800", "severity": "moderate", "owasp_category": "", "category": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Untrusted User Input in Response will result in Reflected Cross Site Scripting Vulnerability.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/infrastructure/internal-api/code/server.js", "DATA_TYPE": "OSS_SCAN", "lineNumber": 20, "ruleId": "a1-injection", "ruleName": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "contextText": "    var endpoint = req.body.endpoint, method = req.body.method || 'GET', headers = req.body.headers || {};\n", "snippetText": "app.post('/', function (req, res) {\n    var endpoint = req.body.endpoint, method = req.body.method || 'GET', headers = req.body.headers || {};\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/ee02f67f3498b3d45811670d8e9e5c00", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/batch-check/job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "1 apiVersion: batch/v1\n", "snippetText": "1 apiVersion: batch/v1\nkind: Job\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_29/b205f90c1c0460591a44477d76deb70d", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PodSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/batch-check/job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_29", "ruleName": "PodSecurityContext", "contextText": "1 apiVersion: batch/v1\n", "snippetText": "1 apiVersion: batch/v1\nkind: Job\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_23/f47e16caa4dadebb0b16cac83c44b77b", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of root containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/batch-check/job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_23", "ruleName": "RootContainers", "contextText": "1 apiVersion: batch/v1\n", "snippetText": "1 apiVersion: batch/v1\nkind: Job\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should run as a high UID to avoid host conflict.", "description": "Containers should run as a high UID to avoid host conflict.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_40/3cbe260b19156d7fdd24bcebe4e718b5", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersHighUID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should run as a high UID to avoid host conflict.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/batch-check/job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_40", "ruleName": "RootContainersHighUID", "contextText": "1 apiVersion: batch/v1\n", "snippetText": "1 apiVersion: batch/v1\nkind: Job\nmetadata:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_31/208f3243ae397fff710de0448421cea7", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Seccomp", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/batch-check/job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_31", "ruleName": "Seccomp", "contextText": "1 apiVersion: batch/v1\n", "snippetText": "1 apiVersion: batch/v1\nkind: Job\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Ensure that Service Account Tokens are only mounted where necessary.", "description": "CIS Benchmark: **5.1.6**\n\nEnsure that Service Account Tokens are only mounted where necessary.\n\nMounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue.\n\n## Remediation\n\nModify the definition of pods and service accounts which do not need to mount service account tokens to disable it.\n", "internal_id": "CKV_K8S_38/dd5f0b942fe7f0e2d3033e412287280a", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ServiceAccountTokens", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that Service Account Tokens are only mounted where necessary.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/batch-check/job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_38", "ruleName": "ServiceAccountTokens", "contextText": "1 apiVersion: batch/v1\n", "snippetText": "1 apiVersion: batch/v1\nkind: Job\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.1.6", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should not run with allowPrivilegeEscalation.", "description": "CIS Benchmark: **5.2.5**\n\nMinimize the admission of containers with allowPrivilegeEscalation.\n\nA container running with the allowPrivilegeEscalation flag set to true may have processes that can gain more privileges than their parent. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.allowPrivilegeEscalation` field is set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_20/7ff137ddc9ce622a5f61a1ad1b3bc24f", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "AllowPrivilegeEscalation", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not run with allowPrivilegeEscalation.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/batch-check/job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 11, "ruleId": "CKV_K8S_20", "ruleName": "AllowPrivilegeEscalation", "contextText": "11       - name: batch-check\n", "snippetText": "11       - name: batch-check\n        image: madhuakula/k8s-goat-batch-check\n        # command:\n"}, "tags": [{"key": "cis_category", "value": "5.2.5", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "CPU limits should be set.", "description": "CPU limits should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_11/07ca375ead897b052579cc09c694dbfa", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPULimits", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU limits should be set.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/batch-check/job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 11, "ruleId": "CKV_K8S_11", "ruleName": "CPULimits", "contextText": "11       - name: batch-check\n", "snippetText": "11       - name: batch-check\n        image: madhuakula/k8s-goat-batch-check\n        # command:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "CPU requests should be set.", "description": "CPU requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_10/1db55aa5a36caa7e398d7f7cc93c0994", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPURequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU requests should be set.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/batch-check/job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 11, "ruleId": "CKV_K8S_10", "ruleName": "CPURequests", "contextText": "11       - name: batch-check\n", "snippetText": "11       - name: batch-check\n        image: madhuakula/k8s-goat-batch-check\n        # command:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_30/d322fb0d74c07924920a24970f9ba8b2", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ContainerSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/batch-check/job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 11, "ruleId": "CKV_K8S_30", "ruleName": "ContainerSecurityContext", "contextText": "11       - name: batch-check\n", "snippetText": "11       - name: batch-check\n        image: madhuakula/k8s-goat-batch-check\n        # command:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of containers with the NET_RAW capability.", "description": "CIS Benchmark: **5.2.7**\n\nDo not generally permit containers with the potentially dangerous NET_RAW capability.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. With Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers. Ideally, all containers should drop this capability. There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching. If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.requiredDropCapabilities` is set to include either `NET_RAW` or `ALL`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_28/c0827e4107dc5abac575607ed94e6c3a", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "DropCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with the NET_RAW capability.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/batch-check/job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 11, "ruleId": "CKV_K8S_28", "ruleName": "DropCapabilities", "contextText": "11       - name: batch-check\n", "snippetText": "11       - name: batch-check\n        image: madhuakula/k8s-goat-batch-check\n        # command:\n"}, "tags": [{"key": "cis_category", "value": "5.2.7", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/3a118a681b460b50fe3e45c3f92b714b", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/batch-check/job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 11, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "11       - name: batch-check\n", "snippetText": "11       - name: batch-check\n        image: madhuakula/k8s-goat-batch-check\n        # command:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Image Tag should be fixed - not latest or blank.", "description": "Image Tag should be fixed - not latest or blank.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_14/7ac014f489b5797b400b4e3677492c56", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageTagFixed", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Image Tag should be fixed - not latest or blank.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/batch-check/job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 11, "ruleId": "CKV_K8S_14", "ruleName": "ImageTagFixed", "contextText": "11       - name: batch-check\n", "snippetText": "11       - name: batch-check\n        image: madhuakula/k8s-goat-batch-check\n        # command:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Memory limits should be set.", "description": "Memory limits should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_13/c601b5d5f1186438d99b2ff71cfa3741", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryLimits", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory limits should be set.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/batch-check/job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 11, "ruleId": "CKV_K8S_13", "ruleName": "MemoryLimits", "contextText": "11       - name: batch-check\n", "snippetText": "11       - name: batch-check\n        image: madhuakula/k8s-goat-batch-check\n        # command:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Memory requests should be set.", "description": "Memory requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_12/834258fed604e9e3af07f66795e36750", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryRequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory requests should be set.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/batch-check/job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 11, "ruleId": "CKV_K8S_12", "ruleName": "MemoryRequests", "contextText": "11       - name: batch-check\n", "snippetText": "11       - name: batch-check\n        image: madhuakula/k8s-goat-batch-check\n        # command:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of containers with capabilities assigned.", "description": "CIS Benchmark: **5.2.9**\n\nMinimize the admission of containers with capabilities assigned.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user. In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\n## Remediation\n\nReview the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\n\n## Additional information\n\n- [Pod Security Policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities)", "internal_id": "CKV_K8S_37/927523dcadc8ade6b51ab5944e56229e", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MinimizeCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with capabilities assigned.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/batch-check/job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 11, "ruleId": "CKV_K8S_37", "ruleName": "MinimizeCapabilities", "contextText": "11       - name: batch-check\n", "snippetText": "11       - name: batch-check\n        image: madhuakula/k8s-goat-batch-check\n        # command:\n"}, "tags": [{"key": "cis_category", "value": "5.2.9", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/a799b84b42d5f2878a52f6d29a371e26", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/batch-check/job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 11, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "11       - name: batch-check\n", "snippetText": "11       - name: batch-check\n        image: madhuakula/k8s-goat-batch-check\n        # command:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/0d1192764739bb63e80d561c1ea6df05", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/build-code/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_29/2ed5eff6ea717aa50613cb675feaa87b", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PodSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/build-code/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_29", "ruleName": "PodSecurityContext", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_23/2e3ff56f8c441227e672643099314af2", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of root containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/build-code/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_23", "ruleName": "RootContainers", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should run as a high UID to avoid host conflict.", "description": "Containers should run as a high UID to avoid host conflict.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_40/b4df2d5a28ac2198a1d58eda1f6aa612", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersHighUID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should run as a high UID to avoid host conflict.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/build-code/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_40", "ruleName": "RootContainersHighUID", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_31/7b386f1277d2f11d2f4a30f779f5624c", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Seccomp", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/build-code/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_31", "ruleName": "Seccomp", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Ensure that Service Account Tokens are only mounted where necessary.", "description": "CIS Benchmark: **5.1.6**\n\nEnsure that Service Account Tokens are only mounted where necessary.\n\nMounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue.\n\n## Remediation\n\nModify the definition of pods and service accounts which do not need to mount service account tokens to disable it.\n", "internal_id": "CKV_K8S_38/372ff099c76eb4628e8b6879daaecd38", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ServiceAccountTokens", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that Service Account Tokens are only mounted where necessary.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/build-code/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_38", "ruleName": "ServiceAccountTokens", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.1.6", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/b802df6c95c06daff3ff9f1139226340", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/build-code/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 24, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "24 apiVersion: v1\n", "snippetText": "24 apiVersion: v1\nkind: Service\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should not run with allowPrivilegeEscalation.", "description": "CIS Benchmark: **5.2.5**\n\nMinimize the admission of containers with allowPrivilegeEscalation.\n\nA container running with the allowPrivilegeEscalation flag set to true may have processes that can gain more privileges than their parent. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.allowPrivilegeEscalation` field is set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_20/197bf618b144280a71410617ad8577b0", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "AllowPrivilegeEscalation", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not run with allowPrivilegeEscalation.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/build-code/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_20", "ruleName": "AllowPrivilegeEscalation", "contextText": "15       - name: build-code\n", "snippetText": "15       - name: build-code\n        image: madhuakula/k8s-goat-build-code\n        resources:\n"}, "tags": [{"key": "cis_category", "value": "5.2.5", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "CPU requests should be set.", "description": "CPU requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_10/221364de1ff26bcfab23c59e670fde6b", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPURequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU requests should be set.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/build-code/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_10", "ruleName": "CPURequests", "contextText": "15       - name: build-code\n", "snippetText": "15       - name: build-code\n        image: madhuakula/k8s-goat-build-code\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_30/49be62bae77c443805444a4627bc6831", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ContainerSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/build-code/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_30", "ruleName": "ContainerSecurityContext", "contextText": "15       - name: build-code\n", "snippetText": "15       - name: build-code\n        image: madhuakula/k8s-goat-build-code\n        resources:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of containers with the NET_RAW capability.", "description": "CIS Benchmark: **5.2.7**\n\nDo not generally permit containers with the potentially dangerous NET_RAW capability.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. With Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers. Ideally, all containers should drop this capability. There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching. If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.requiredDropCapabilities` is set to include either `NET_RAW` or `ALL`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_28/df5bcc0e91fe3da145a14e8d6d69ee8e", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "DropCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with the NET_RAW capability.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/build-code/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_28", "ruleName": "DropCapabilities", "contextText": "15       - name: build-code\n", "snippetText": "15       - name: build-code\n        image: madhuakula/k8s-goat-build-code\n        resources:\n"}, "tags": [{"key": "cis_category", "value": "5.2.7", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/3e636f70c72374f187dd8fb4d5ec8c13", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/build-code/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "15       - name: build-code\n", "snippetText": "15       - name: build-code\n        image: madhuakula/k8s-goat-build-code\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Image Tag should be fixed - not latest or blank.", "description": "Image Tag should be fixed - not latest or blank.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_14/4127f2f04be4aa9d48cc81c3498c97b9", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageTagFixed", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Image Tag should be fixed - not latest or blank.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/build-code/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_14", "ruleName": "ImageTagFixed", "contextText": "15       - name: build-code\n", "snippetText": "15       - name: build-code\n        image: madhuakula/k8s-goat-build-code\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Liveness Probe Should be Configured.", "description": "Liveness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_8/97e258fcafa89e1d885d622c0822a417", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "LivenessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Liveness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/build-code/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_8", "ruleName": "LivenessProbe", "contextText": "15       - name: build-code\n", "snippetText": "15       - name: build-code\n        image: madhuakula/k8s-goat-build-code\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Memory requests should be set.", "description": "Memory requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_12/485f50903229a3ef9fa4bbb1a8feab8d", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryRequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory requests should be set.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/build-code/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_12", "ruleName": "MemoryRequests", "contextText": "15       - name: build-code\n", "snippetText": "15       - name: build-code\n        image: madhuakula/k8s-goat-build-code\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of containers with capabilities assigned.", "description": "CIS Benchmark: **5.2.9**\n\nMinimize the admission of containers with capabilities assigned.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user. In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\n## Remediation\n\nReview the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\n\n## Additional information\n\n- [Pod Security Policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities)", "internal_id": "CKV_K8S_37/b1cb5587cceb227bedb48e632a3e2357", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MinimizeCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with capabilities assigned.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/build-code/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_37", "ruleName": "MinimizeCapabilities", "contextText": "15       - name: build-code\n", "snippetText": "15       - name: build-code\n        image: madhuakula/k8s-goat-build-code\n        resources:\n"}, "tags": [{"key": "cis_category", "value": "5.2.9", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/4c0bb04024b89b52339e7978becf7773", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/build-code/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "15       - name: build-code\n", "snippetText": "15       - name: build-code\n        image: madhuakula/k8s-goat-build-code\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Readiness Probe Should be Configured.", "description": "Readiness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_9/853d8d9faa812de7a2f984082080e09b", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadinessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Readiness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/build-code/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_9", "ruleName": "ReadinessProbe", "contextText": "15       - name: build-code\n", "snippetText": "15       - name: build-code\n        image: madhuakula/k8s-goat-build-code\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_29/a8afca773690665ed7e8f3bee43f18a0", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PodSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/cache-store/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 19, "ruleId": "CKV_K8S_29", "ruleName": "PodSecurityContext", "contextText": "19 apiVersion: apps/v1\n", "snippetText": "19 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_23/cfd37252d9b348bcdb513f998c2b313a", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of root containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/cache-store/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 19, "ruleId": "CKV_K8S_23", "ruleName": "RootContainers", "contextText": "19 apiVersion: apps/v1\n", "snippetText": "19 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should run as a high UID to avoid host conflict.", "description": "Containers should run as a high UID to avoid host conflict.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_40/92d17114ebca523a0fa74f666b0e0d0e", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersHighUID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should run as a high UID to avoid host conflict.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/cache-store/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 19, "ruleId": "CKV_K8S_40", "ruleName": "RootContainersHighUID", "contextText": "19 apiVersion: apps/v1\n", "snippetText": "19 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_31/c8448d1eb58e2090ff1ee1b6b3eb218e", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Seccomp", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/cache-store/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 19, "ruleId": "CKV_K8S_31", "ruleName": "Seccomp", "contextText": "19 apiVersion: apps/v1\n", "snippetText": "19 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Ensure that Service Account Tokens are only mounted where necessary.", "description": "CIS Benchmark: **5.1.6**\n\nEnsure that Service Account Tokens are only mounted where necessary.\n\nMounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue.\n\n## Remediation\n\nModify the definition of pods and service accounts which do not need to mount service account tokens to disable it.\n", "internal_id": "CKV_K8S_38/277c4ececa9e319c1f4e7ab26ec7ba1b", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ServiceAccountTokens", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that Service Account Tokens are only mounted where necessary.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/cache-store/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 19, "ruleId": "CKV_K8S_38", "ruleName": "ServiceAccountTokens", "contextText": "19 apiVersion: apps/v1\n", "snippetText": "19 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.1.6", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should not run with allowPrivilegeEscalation.", "description": "CIS Benchmark: **5.2.5**\n\nMinimize the admission of containers with allowPrivilegeEscalation.\n\nA container running with the allowPrivilegeEscalation flag set to true may have processes that can gain more privileges than their parent. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.allowPrivilegeEscalation` field is set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_20/624e1c842dc85c86f16084c91a9d5369", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "AllowPrivilegeEscalation", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not run with allowPrivilegeEscalation.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/cache-store/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 36, "ruleId": "CKV_K8S_20", "ruleName": "AllowPrivilegeEscalation", "contextText": "36       - name: cache-store\n", "snippetText": "36       - name: cache-store\n        image: madhuakula/k8s-goat-cache-store\n        ports:\n"}, "tags": [{"key": "cis_category", "value": "5.2.5", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "CPU limits should be set.", "description": "CPU limits should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_11/e2fcbc7892f1ffc72730185f3d88e6fc", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPULimits", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU limits should be set.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/cache-store/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 36, "ruleId": "CKV_K8S_11", "ruleName": "CPULimits", "contextText": "36       - name: cache-store\n", "snippetText": "36       - name: cache-store\n        image: madhuakula/k8s-goat-cache-store\n        ports:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "CPU requests should be set.", "description": "CPU requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_10/c6b55b26bf3ec643dd1dbd3579e4019e", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPURequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU requests should be set.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/cache-store/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 36, "ruleId": "CKV_K8S_10", "ruleName": "CPURequests", "contextText": "36       - name: cache-store\n", "snippetText": "36       - name: cache-store\n        image: madhuakula/k8s-goat-cache-store\n        ports:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_30/ac215c486bc452fa558e9bacde8334a3", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ContainerSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/cache-store/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 36, "ruleId": "CKV_K8S_30", "ruleName": "ContainerSecurityContext", "contextText": "36       - name: cache-store\n", "snippetText": "36       - name: cache-store\n        image: madhuakula/k8s-goat-cache-store\n        ports:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of containers with the NET_RAW capability.", "description": "CIS Benchmark: **5.2.7**\n\nDo not generally permit containers with the potentially dangerous NET_RAW capability.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. With Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers. Ideally, all containers should drop this capability. There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching. If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.requiredDropCapabilities` is set to include either `NET_RAW` or `ALL`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_28/1d9d3ccf2001f3c19973780171f410a1", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "DropCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with the NET_RAW capability.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/cache-store/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 36, "ruleId": "CKV_K8S_28", "ruleName": "DropCapabilities", "contextText": "36       - name: cache-store\n", "snippetText": "36       - name: cache-store\n        image: madhuakula/k8s-goat-cache-store\n        ports:\n"}, "tags": [{"key": "cis_category", "value": "5.2.7", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/ea1a30d652b1f07e3bd0cd9248bb717f", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/cache-store/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 36, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "36       - name: cache-store\n", "snippetText": "36       - name: cache-store\n        image: madhuakula/k8s-goat-cache-store\n        ports:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Image Tag should be fixed - not latest or blank.", "description": "Image Tag should be fixed - not latest or blank.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_14/17dd10cb156ce4173a01de4a7a3734b3", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageTagFixed", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Image Tag should be fixed - not latest or blank.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/cache-store/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 36, "ruleId": "CKV_K8S_14", "ruleName": "ImageTagFixed", "contextText": "36       - name: cache-store\n", "snippetText": "36       - name: cache-store\n        image: madhuakula/k8s-goat-cache-store\n        ports:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Liveness Probe Should be Configured.", "description": "Liveness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_8/08ce530bd576f4314a169b304b463c46", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "LivenessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Liveness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/cache-store/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 36, "ruleId": "CKV_K8S_8", "ruleName": "LivenessProbe", "contextText": "36       - name: cache-store\n", "snippetText": "36       - name: cache-store\n        image: madhuakula/k8s-goat-cache-store\n        ports:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Memory limits should be set.", "description": "Memory limits should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_13/23f83635ffa59fc11d0faa2cfce2c427", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryLimits", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory limits should be set.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/cache-store/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 36, "ruleId": "CKV_K8S_13", "ruleName": "MemoryLimits", "contextText": "36       - name: cache-store\n", "snippetText": "36       - name: cache-store\n        image: madhuakula/k8s-goat-cache-store\n        ports:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Memory requests should be set.", "description": "Memory requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_12/9558f24daca73c55343fd8bc805668f1", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryRequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory requests should be set.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/cache-store/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 36, "ruleId": "CKV_K8S_12", "ruleName": "MemoryRequests", "contextText": "36       - name: cache-store\n", "snippetText": "36       - name: cache-store\n        image: madhuakula/k8s-goat-cache-store\n        ports:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of containers with capabilities assigned.", "description": "CIS Benchmark: **5.2.9**\n\nMinimize the admission of containers with capabilities assigned.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user. In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\n## Remediation\n\nReview the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\n\n## Additional information\n\n- [Pod Security Policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities)", "internal_id": "CKV_K8S_37/c9025cbd6d4f4e0ff0fce90c8e1082b1", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MinimizeCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with capabilities assigned.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/cache-store/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 36, "ruleId": "CKV_K8S_37", "ruleName": "MinimizeCapabilities", "contextText": "36       - name: cache-store\n", "snippetText": "36       - name: cache-store\n        image: madhuakula/k8s-goat-cache-store\n        ports:\n"}, "tags": [{"key": "cis_category", "value": "5.2.9", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/1075ea3ee4eb98f366e4291a1d87ddb6", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/cache-store/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 36, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "36       - name: cache-store\n", "snippetText": "36       - name: cache-store\n        image: madhuakula/k8s-goat-cache-store\n        ports:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Readiness Probe Should be Configured.", "description": "Readiness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_9/205925d4cccfc26a0c7ee7afa8d6ca37", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadinessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Readiness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/cache-store/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 36, "ruleId": "CKV_K8S_9", "ruleName": "ReadinessProbe", "contextText": "36       - name: cache-store\n", "snippetText": "36       - name: cache-store\n        image: madhuakula/k8s-goat-cache-store\n        ports:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/cee416e64e7eb145b65e068b5dca5a15", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/docker-bench-security/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 12, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "12 apiVersion: apps/v1\n", "snippetText": "12 apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Do not expose the docker daemon socket to containers.", "description": "Do not expose the docker daemon socket to containers.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_27/a0ec28589110117d7f7b79e504356be4", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DockerSocketVolume", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Do not expose the docker daemon socket to containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/docker-bench-security/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 12, "ruleId": "CKV_K8S_27", "ruleName": "DockerSocketVolume", "contextText": "12 apiVersion: apps/v1\n", "snippetText": "12 apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_23/34730e2ab039ad763ccf1fec820d8a94", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of root containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/docker-bench-security/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 12, "ruleId": "CKV_K8S_23", "ruleName": "RootContainers", "contextText": "12 apiVersion: apps/v1\n", "snippetText": "12 apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should run as a high UID to avoid host conflict.", "description": "Containers should run as a high UID to avoid host conflict.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_40/c8869a878d2c409e57ca792729d0bb6e", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersHighUID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should run as a high UID to avoid host conflict.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/docker-bench-security/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 12, "ruleId": "CKV_K8S_40", "ruleName": "RootContainersHighUID", "contextText": "12 apiVersion: apps/v1\n", "snippetText": "12 apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_31/bba62b7384352be706ac2df5e057d8c5", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Seccomp", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/docker-bench-security/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 12, "ruleId": "CKV_K8S_31", "ruleName": "Seccomp", "contextText": "12 apiVersion: apps/v1\n", "snippetText": "12 apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Ensure that Service Account Tokens are only mounted where necessary.", "description": "CIS Benchmark: **5.1.6**\n\nEnsure that Service Account Tokens are only mounted where necessary.\n\nMounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue.\n\n## Remediation\n\nModify the definition of pods and service accounts which do not need to mount service account tokens to disable it.\n", "internal_id": "CKV_K8S_38/f9f0d7df574e8ba44719d4702ce28d09", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ServiceAccountTokens", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that Service Account Tokens are only mounted where necessary.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/docker-bench-security/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 12, "ruleId": "CKV_K8S_38", "ruleName": "ServiceAccountTokens", "contextText": "12 apiVersion: apps/v1\n", "snippetText": "12 apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.1.6", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should not share the host IPC namespace.", "description": "CIS Benchmark: **5.2.3**\n\nMinimize the admission of containers wishing to share the host IPC namespace.\n\nA container running in the host's IPC namespace can use IPC to interact with processes outside the container. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to share the host IPC namespace. If you have a requirement to containers which require hostIPC, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.hostIPC` field is omitted or set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  hostNetwork: false\n  hostIPC: false\n  hostPID: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Host namespaces](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces)", "internal_id": "CKV_K8S_18/fae949834e087c1039cf2e8ae2ff903a", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "ShareHostIPC", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not share the host IPC namespace.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/docker-bench-security/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 12, "ruleId": "CKV_K8S_18", "ruleName": "ShareHostIPC", "contextText": "12 apiVersion: apps/v1\n", "snippetText": "12 apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.3", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should not share the host process ID namespace.", "description": "CIS Benchmark: **5.2.2**\n\nMinimize the admission of containers wishing to share the host process ID namespace.\n\nA container running in the host's PID namespace can inspect processes running outside the container. If the container also has access to ptrace capabilities this can be used to escalate privileges outside of the container. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to share the host PID namespace. If you need to run containers which require hostPID, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.hostPID` field is omitted or set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  hostNetwork: false\n  hostIPC: false\n  hostPID: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privileged)", "internal_id": "CKV_K8S_17/1767409054e471a4f19098af073e11f0", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "ShareHostPID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not share the host process ID namespace.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/docker-bench-security/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 12, "ruleId": "CKV_K8S_17", "ruleName": "ShareHostPID", "contextText": "12 apiVersion: apps/v1\n", "snippetText": "12 apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.2", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should not share the host network namespace.", "description": "CIS Benchmark: **5.2.4**\n\nMinimize the admission of containers wishing to share the host network namespace.\n\nA container running in the host's network namespace could access the local loopback device, and could access network traffic to and from other pods. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to share the host network namespace. If you have need to run containers which require hostNetwork, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.hostNetwork` field is omitted or set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  hostNetwork: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Host namespaces](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces)", "internal_id": "CKV_K8S_19/898de1af27bc4f25641cd98a8b72cc08", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "SharedHostNetworkNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not share the host network namespace.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/docker-bench-security/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 12, "ruleId": "CKV_K8S_19", "ruleName": "SharedHostNetworkNamespace", "contextText": "12 apiVersion: apps/v1\n", "snippetText": "12 apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should not run with allowPrivilegeEscalation.", "description": "CIS Benchmark: **5.2.5**\n\nMinimize the admission of containers with allowPrivilegeEscalation.\n\nA container running with the allowPrivilegeEscalation flag set to true may have processes that can gain more privileges than their parent. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.allowPrivilegeEscalation` field is set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_20/d7d9cc9b9de3c50995ac11601ffc99fc", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "AllowPrivilegeEscalation", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not run with allowPrivilegeEscalation.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/docker-bench-security/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 33, "ruleId": "CKV_K8S_20", "ruleName": "AllowPrivilegeEscalation", "contextText": "33         - name: docker-bench\n", "snippetText": "33         - name: docker-bench\n          image: madhuakula/hacker-container\n          imagePullPolicy: Always\n"}, "tags": [{"key": "cis_category", "value": "5.2.5", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of containers with added capability.", "description": "CIS Benchmark: **5.2.8**\n\nMinimize the admission of containers with added capabilities.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities outside this set can be added to containers which could expose them to risks of container breakout attacks. There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with capabilities beyond the default set from launching. If you need to run containers with additional capabilities, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nEnsure that allowedCapabilities is not present in PodSecurityPolicy (PSPs) for the cluster unless it is set to an empty array.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  # Remove allowedCapabilities\n  ...\n```\n\n\n## Additional information\n\n- [Pod Security Policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities)", "internal_id": "CKV_K8S_25/cd426f3ad6faf0a32b0f225aa4b34c7d", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "AllowedCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with added capability.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/docker-bench-security/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 33, "ruleId": "CKV_K8S_25", "ruleName": "AllowedCapabilities", "contextText": "33         - name: docker-bench\n", "snippetText": "33         - name: docker-bench\n          image: madhuakula/hacker-container\n          imagePullPolicy: Always\n"}, "tags": [{"key": "cis_category", "value": "5.2.8", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of containers with the NET_RAW capability.", "description": "CIS Benchmark: **5.2.7**\n\nDo not generally permit containers with the potentially dangerous NET_RAW capability.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. With Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers. Ideally, all containers should drop this capability. There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching. If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.requiredDropCapabilities` is set to include either `NET_RAW` or `ALL`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_28/239d72370a8b2e48c0d25036a4c390fa", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "DropCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with the NET_RAW capability.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/docker-bench-security/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 33, "ruleId": "CKV_K8S_28", "ruleName": "DropCapabilities", "contextText": "33         - name: docker-bench\n", "snippetText": "33         - name: docker-bench\n          image: madhuakula/hacker-container\n          imagePullPolicy: Always\n"}, "tags": [{"key": "cis_category", "value": "5.2.7", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/73ecac09030be3b458e245cb27b8eaee", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/docker-bench-security/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 33, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "33         - name: docker-bench\n", "snippetText": "33         - name: docker-bench\n          image: madhuakula/hacker-container\n          imagePullPolicy: Always\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Image Tag should be fixed - not latest or blank.", "description": "Image Tag should be fixed - not latest or blank.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_14/493484f724541530acb133d2f9b1feb6", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageTagFixed", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Image Tag should be fixed - not latest or blank.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/docker-bench-security/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 33, "ruleId": "CKV_K8S_14", "ruleName": "ImageTagFixed", "contextText": "33         - name: docker-bench\n", "snippetText": "33         - name: docker-bench\n          image: madhuakula/hacker-container\n          imagePullPolicy: Always\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Liveness Probe Should be Configured.", "description": "Liveness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_8/9fb8fa09aeb403d404319b92a872a08e", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "LivenessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Liveness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/docker-bench-security/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 33, "ruleId": "CKV_K8S_8", "ruleName": "LivenessProbe", "contextText": "33         - name: docker-bench\n", "snippetText": "33         - name: docker-bench\n          image: madhuakula/hacker-container\n          imagePullPolicy: Always\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of containers with capabilities assigned.", "description": "CIS Benchmark: **5.2.9**\n\nMinimize the admission of containers with capabilities assigned.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user. In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\n## Remediation\n\nReview the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\n\n## Additional information\n\n- [Pod Security Policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities)", "internal_id": "CKV_K8S_37/6abe91a5ce4a2ebc2a75f2cc92818c31", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MinimizeCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with capabilities assigned.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/docker-bench-security/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 33, "ruleId": "CKV_K8S_37", "ruleName": "MinimizeCapabilities", "contextText": "33         - name: docker-bench\n", "snippetText": "33         - name: docker-bench\n          image: madhuakula/hacker-container\n          imagePullPolicy: Always\n"}, "tags": [{"key": "cis_category", "value": "5.2.9", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Container should not be privileged.", "description": "CIS Benchmark: **5.2.1**\n\nMinimize the admission of privileged containers.\n\nPrivileged containers have access to all Linux Kernel capabilities and devices. A container running with full privileges can do almost everything that the host can do. This flag exists to allow special use-cases, like manipulating the network stack and accessing devices. There should be at least one PodSecurityPolicy (PSP) defined which does not permit privileged containers. If you need to run privileged containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.privileged` field is omitted or set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  hostNetwork: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privileged)", "internal_id": "CKV_K8S_16/50227b1175ddbc2fccd47dd1c4fdcc43", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PrivilegedContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Container should not be privileged.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/docker-bench-security/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 33, "ruleId": "CKV_K8S_16", "ruleName": "PrivilegedContainers", "contextText": "33         - name: docker-bench\n", "snippetText": "33         - name: docker-bench\n          image: madhuakula/hacker-container\n          imagePullPolicy: Always\n"}, "tags": [{"key": "cis_category", "value": "5.2.1", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/a08ac369d4e1f51a8d29ff9b8fcbadff", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/docker-bench-security/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 33, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "33         - name: docker-bench\n", "snippetText": "33         - name: docker-bench\n          image: madhuakula/hacker-container\n          imagePullPolicy: Always\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Readiness Probe Should be Configured.", "description": "Readiness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_9/acce164bad1584e1133d494cfff0e336", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadinessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Readiness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/docker-bench-security/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 33, "ruleId": "CKV_K8S_9", "ruleName": "ReadinessProbe", "contextText": "33         - name: docker-bench\n", "snippetText": "33         - name: docker-bench\n          image: madhuakula/hacker-container\n          imagePullPolicy: Always\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/1b9e1304e3789b1115af9a8ca83b1bf9", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/health-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Do not expose the docker daemon socket to containers.", "description": "Do not expose the docker daemon socket to containers.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_27/d0753eb26023d63e116d6d63fc4bd581", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DockerSocketVolume", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Do not expose the docker daemon socket to containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/health-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_27", "ruleName": "DockerSocketVolume", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_29/64f968cff53bd1672a85d518ed195552", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PodSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/health-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_29", "ruleName": "PodSecurityContext", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_23/01ae1f991e12805ef94f35edf9d6ded2", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of root containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/health-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_23", "ruleName": "RootContainers", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should run as a high UID to avoid host conflict.", "description": "Containers should run as a high UID to avoid host conflict.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_40/8de9d58fcec09c586cec2b340564dd96", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersHighUID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should run as a high UID to avoid host conflict.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/health-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_40", "ruleName": "RootContainersHighUID", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_31/f40b1b2c00e7039e148025666845d0b4", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Seccomp", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/health-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_31", "ruleName": "Seccomp", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Ensure that Service Account Tokens are only mounted where necessary.", "description": "CIS Benchmark: **5.1.6**\n\nEnsure that Service Account Tokens are only mounted where necessary.\n\nMounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue.\n\n## Remediation\n\nModify the definition of pods and service accounts which do not need to mount service account tokens to disable it.\n", "internal_id": "CKV_K8S_38/1cdda6c806c098bceb588ec115070236", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ServiceAccountTokens", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that Service Account Tokens are only mounted where necessary.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/health-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_38", "ruleName": "ServiceAccountTokens", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.1.6", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/d627a1e2adc2cbb867c62ce0b949309e", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/health-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 35, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "35 apiVersion: v1\n", "snippetText": "35 apiVersion: v1\nkind: Service\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should not run with allowPrivilegeEscalation.", "description": "CIS Benchmark: **5.2.5**\n\nMinimize the admission of containers with allowPrivilegeEscalation.\n\nA container running with the allowPrivilegeEscalation flag set to true may have processes that can gain more privileges than their parent. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.allowPrivilegeEscalation` field is set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_20/790fe36fbb988b723b11d362313e68f0", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "AllowPrivilegeEscalation", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not run with allowPrivilegeEscalation.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/health-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_20", "ruleName": "AllowPrivilegeEscalation", "contextText": "15       - name: health-check\n", "snippetText": "15       - name: health-check\n        image: madhuakula/k8s-goat-health-check\n        resources:\n"}, "tags": [{"key": "cis_category", "value": "5.2.5", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "CPU requests should be set.", "description": "CPU requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_10/05bd135d36bea25ba2e74c70baf10288", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPURequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU requests should be set.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/health-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_10", "ruleName": "CPURequests", "contextText": "15       - name: health-check\n", "snippetText": "15       - name: health-check\n        image: madhuakula/k8s-goat-health-check\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of containers with the NET_RAW capability.", "description": "CIS Benchmark: **5.2.7**\n\nDo not generally permit containers with the potentially dangerous NET_RAW capability.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. With Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers. Ideally, all containers should drop this capability. There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching. If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.requiredDropCapabilities` is set to include either `NET_RAW` or `ALL`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_28/44c38d759d85da4e2fed384101ab3873", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "DropCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with the NET_RAW capability.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/health-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_28", "ruleName": "DropCapabilities", "contextText": "15       - name: health-check\n", "snippetText": "15       - name: health-check\n        image: madhuakula/k8s-goat-health-check\n        resources:\n"}, "tags": [{"key": "cis_category", "value": "5.2.7", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/b1be6ad396130647ec3eaaec32a46c07", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/health-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "15       - name: health-check\n", "snippetText": "15       - name: health-check\n        image: madhuakula/k8s-goat-health-check\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Image Tag should be fixed - not latest or blank.", "description": "Image Tag should be fixed - not latest or blank.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_14/4c95d8da8f606729cdf607b2db01b1dc", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageTagFixed", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Image Tag should be fixed - not latest or blank.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/health-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_14", "ruleName": "ImageTagFixed", "contextText": "15       - name: health-check\n", "snippetText": "15       - name: health-check\n        image: madhuakula/k8s-goat-health-check\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Liveness Probe Should be Configured.", "description": "Liveness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_8/80f30213e32c1f633b7218a52e5d7e29", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "LivenessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Liveness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/health-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_8", "ruleName": "LivenessProbe", "contextText": "15       - name: health-check\n", "snippetText": "15       - name: health-check\n        image: madhuakula/k8s-goat-health-check\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Memory requests should be set.", "description": "Memory requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_12/5945192447b7f8801e4d4aa30392bf5d", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryRequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory requests should be set.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/health-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_12", "ruleName": "MemoryRequests", "contextText": "15       - name: health-check\n", "snippetText": "15       - name: health-check\n        image: madhuakula/k8s-goat-health-check\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of containers with capabilities assigned.", "description": "CIS Benchmark: **5.2.9**\n\nMinimize the admission of containers with capabilities assigned.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user. In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\n## Remediation\n\nReview the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\n\n## Additional information\n\n- [Pod Security Policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities)", "internal_id": "CKV_K8S_37/99eac67f30ea58a698a7b106f1ef9bdb", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MinimizeCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with capabilities assigned.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/health-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_37", "ruleName": "MinimizeCapabilities", "contextText": "15       - name: health-check\n", "snippetText": "15       - name: health-check\n        image: madhuakula/k8s-goat-health-check\n        resources:\n"}, "tags": [{"key": "cis_category", "value": "5.2.9", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Container should not be privileged.", "description": "CIS Benchmark: **5.2.1**\n\nMinimize the admission of privileged containers.\n\nPrivileged containers have access to all Linux Kernel capabilities and devices. A container running with full privileges can do almost everything that the host can do. This flag exists to allow special use-cases, like manipulating the network stack and accessing devices. There should be at least one PodSecurityPolicy (PSP) defined which does not permit privileged containers. If you need to run privileged containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.privileged` field is omitted or set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  hostNetwork: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privileged)", "internal_id": "CKV_K8S_16/567ce20afdc55a7d0ed36fae0c898655", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PrivilegedContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Container should not be privileged.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/health-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_16", "ruleName": "PrivilegedContainers", "contextText": "15       - name: health-check\n", "snippetText": "15       - name: health-check\n        image: madhuakula/k8s-goat-health-check\n        resources:\n"}, "tags": [{"key": "cis_category", "value": "5.2.1", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/6c8659ded44c0e859dd180e45992e2e6", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/health-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "15       - name: health-check\n", "snippetText": "15       - name: health-check\n        image: madhuakula/k8s-goat-health-check\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Readiness Probe Should be Configured.", "description": "Readiness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_9/72feadb76546f22131f106def460e230", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadinessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Readiness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/health-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_9", "ruleName": "ReadinessProbe", "contextText": "15       - name: health-check\n", "snippetText": "15       - name: health-check\n        image: madhuakula/k8s-goat-health-check\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/5467ad7d196c8d26bb7edb3d3ad8c9ff", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/hunger-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_29/cce3c32d63d8a11a638b2ec45895401d", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PodSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/hunger-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_29", "ruleName": "PodSecurityContext", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_23/6f58726c68cb2833644c2e05ef51c974", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of root containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/hunger-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_23", "ruleName": "RootContainers", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should run as a high UID to avoid host conflict.", "description": "Containers should run as a high UID to avoid host conflict.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_40/48fd4f0ef41024ce75fabf1d33538fc9", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersHighUID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should run as a high UID to avoid host conflict.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/hunger-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_40", "ruleName": "RootContainersHighUID", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_31/ca0a10229dc8c2f7469b36860da8f5b2", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Seccomp", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/hunger-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_31", "ruleName": "Seccomp", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Ensure that Service Account Tokens are only mounted where necessary.", "description": "CIS Benchmark: **5.1.6**\n\nEnsure that Service Account Tokens are only mounted where necessary.\n\nMounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue.\n\n## Remediation\n\nModify the definition of pods and service accounts which do not need to mount service account tokens to disable it.\n", "internal_id": "CKV_K8S_38/8b994bec6393a2e4b5a07589dbb80ce8", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ServiceAccountTokens", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that Service Account Tokens are only mounted where necessary.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/hunger-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_38", "ruleName": "ServiceAccountTokens", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.1.6", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/94dd9f501f46542f0a152d0488790200", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/hunger-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 27, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "27 apiVersion: v1\n", "snippetText": "27 apiVersion: v1\nkind: Service\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should not run with allowPrivilegeEscalation.", "description": "CIS Benchmark: **5.2.5**\n\nMinimize the admission of containers with allowPrivilegeEscalation.\n\nA container running with the allowPrivilegeEscalation flag set to true may have processes that can gain more privileges than their parent. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.allowPrivilegeEscalation` field is set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_20/fe11945b25d29e38406ceb99360cfbb6", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "AllowPrivilegeEscalation", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not run with allowPrivilegeEscalation.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/hunger-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_20", "ruleName": "AllowPrivilegeEscalation", "contextText": "15       - name: hunger-check\n", "snippetText": "15       - name: hunger-check\n        image: madhuakula/k8s-goat-hunger-check\n        # resources:\n"}, "tags": [{"key": "cis_category", "value": "5.2.5", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "CPU limits should be set.", "description": "CPU limits should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_11/34139461c6e75574112acc3f01b50a43", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPULimits", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU limits should be set.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/hunger-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_11", "ruleName": "CPULimits", "contextText": "15       - name: hunger-check\n", "snippetText": "15       - name: hunger-check\n        image: madhuakula/k8s-goat-hunger-check\n        # resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "CPU requests should be set.", "description": "CPU requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_10/d7fbbcee339664a0e92528cceabfba40", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPURequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU requests should be set.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/hunger-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_10", "ruleName": "CPURequests", "contextText": "15       - name: hunger-check\n", "snippetText": "15       - name: hunger-check\n        image: madhuakula/k8s-goat-hunger-check\n        # resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_30/23cdfb3fdea5faf4e1666561a52754cb", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ContainerSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/hunger-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_30", "ruleName": "ContainerSecurityContext", "contextText": "15       - name: hunger-check\n", "snippetText": "15       - name: hunger-check\n        image: madhuakula/k8s-goat-hunger-check\n        # resources:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of containers with the NET_RAW capability.", "description": "CIS Benchmark: **5.2.7**\n\nDo not generally permit containers with the potentially dangerous NET_RAW capability.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. With Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers. Ideally, all containers should drop this capability. There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching. If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.requiredDropCapabilities` is set to include either `NET_RAW` or `ALL`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_28/c508b30433c3d69f2210eccf068b5e32", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "DropCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with the NET_RAW capability.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/hunger-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_28", "ruleName": "DropCapabilities", "contextText": "15       - name: hunger-check\n", "snippetText": "15       - name: hunger-check\n        image: madhuakula/k8s-goat-hunger-check\n        # resources:\n"}, "tags": [{"key": "cis_category", "value": "5.2.7", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/bba95f21a676e056b1dcde5121387001", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/hunger-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "15       - name: hunger-check\n", "snippetText": "15       - name: hunger-check\n        image: madhuakula/k8s-goat-hunger-check\n        # resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Image Tag should be fixed - not latest or blank.", "description": "Image Tag should be fixed - not latest or blank.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_14/ad48fab663aec1409587f112095328bd", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageTagFixed", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Image Tag should be fixed - not latest or blank.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/hunger-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_14", "ruleName": "ImageTagFixed", "contextText": "15       - name: hunger-check\n", "snippetText": "15       - name: hunger-check\n        image: madhuakula/k8s-goat-hunger-check\n        # resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Liveness Probe Should be Configured.", "description": "Liveness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_8/4bac09e15f5fe8077500579fc1daa60b", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "LivenessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Liveness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/hunger-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_8", "ruleName": "LivenessProbe", "contextText": "15       - name: hunger-check\n", "snippetText": "15       - name: hunger-check\n        image: madhuakula/k8s-goat-hunger-check\n        # resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Memory limits should be set.", "description": "Memory limits should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_13/5e937b5c558ad1b89c66dbc9fecf1b4f", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryLimits", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory limits should be set.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/hunger-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_13", "ruleName": "MemoryLimits", "contextText": "15       - name: hunger-check\n", "snippetText": "15       - name: hunger-check\n        image: madhuakula/k8s-goat-hunger-check\n        # resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Memory requests should be set.", "description": "Memory requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_12/9a11f42853567a2272b7c3250e460775", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryRequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory requests should be set.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/hunger-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_12", "ruleName": "MemoryRequests", "contextText": "15       - name: hunger-check\n", "snippetText": "15       - name: hunger-check\n        image: madhuakula/k8s-goat-hunger-check\n        # resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of containers with capabilities assigned.", "description": "CIS Benchmark: **5.2.9**\n\nMinimize the admission of containers with capabilities assigned.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user. In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\n## Remediation\n\nReview the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\n\n## Additional information\n\n- [Pod Security Policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities)", "internal_id": "CKV_K8S_37/af918ddd0e8ecf274d72bfbbad148ce5", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MinimizeCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with capabilities assigned.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/hunger-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_37", "ruleName": "MinimizeCapabilities", "contextText": "15       - name: hunger-check\n", "snippetText": "15       - name: hunger-check\n        image: madhuakula/k8s-goat-hunger-check\n        # resources:\n"}, "tags": [{"key": "cis_category", "value": "5.2.9", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/d64ffdc6f01739ebee2da889014033cd", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/hunger-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "15       - name: hunger-check\n", "snippetText": "15       - name: hunger-check\n        image: madhuakula/k8s-goat-hunger-check\n        # resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Readiness Probe Should be Configured.", "description": "Readiness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_9/4e5c283130aecd1469759f6bcca78487", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadinessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Readiness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/hunger-check/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_9", "ruleName": "ReadinessProbe", "contextText": "15       - name: hunger-check\n", "snippetText": "15       - name: hunger-check\n        image: madhuakula/k8s-goat-hunger-check\n        # resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/c4ee36fe53a594e907233271913dd2a7", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/internal-proxy/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_29/e69658ee1cdd335524f6deff275ce68d", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PodSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/internal-proxy/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_29", "ruleName": "PodSecurityContext", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_23/3adecd72ce7fe8146f198af0d95fc9b6", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of root containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/internal-proxy/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_23", "ruleName": "RootContainers", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should run as a high UID to avoid host conflict.", "description": "Containers should run as a high UID to avoid host conflict.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_40/f111f47545fdb0b7b46831dfe8aa98c8", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersHighUID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should run as a high UID to avoid host conflict.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/internal-proxy/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_40", "ruleName": "RootContainersHighUID", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_31/69a1e1505e3490bc247b01fbd4d43820", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Seccomp", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/internal-proxy/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_31", "ruleName": "Seccomp", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Ensure that Service Account Tokens are only mounted where necessary.", "description": "CIS Benchmark: **5.1.6**\n\nEnsure that Service Account Tokens are only mounted where necessary.\n\nMounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue.\n\n## Remediation\n\nModify the definition of pods and service accounts which do not need to mount service account tokens to disable it.\n", "internal_id": "CKV_K8S_38/16207a29b1b98b774801f2d909a2b852", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ServiceAccountTokens", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that Service Account Tokens are only mounted where necessary.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/internal-proxy/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_38", "ruleName": "ServiceAccountTokens", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.1.6", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/f747e38df2622af5d8990497d8f9dd92", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/internal-proxy/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 40, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "40 apiVersion: v1\n", "snippetText": "40 apiVersion: v1\nkind: Service\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/f228fb22663e226316aebf52b7c5a5bf", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/internal-proxy/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 52, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "52 apiVersion: v1\n", "snippetText": "52 apiVersion: v1\nkind: Service\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should not run with allowPrivilegeEscalation.", "description": "CIS Benchmark: **5.2.5**\n\nMinimize the admission of containers with allowPrivilegeEscalation.\n\nA container running with the allowPrivilegeEscalation flag set to true may have processes that can gain more privileges than their parent. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.allowPrivilegeEscalation` field is set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_20/718ca6e126ecbe8a0e0086dabb305d79", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "AllowPrivilegeEscalation", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not run with allowPrivilegeEscalation.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/internal-proxy/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 17, "ruleId": "CKV_K8S_20", "ruleName": "AllowPrivilegeEscalation", "contextText": "17       - name: internal-api\n", "snippetText": "17       - name: internal-api\n        image: madhuakula/k8s-goat-internal-api\n        resources:\n"}, "tags": [{"key": "cis_category", "value": "5.2.5", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_30/700170ad42ab57be938418a3d2d0def8", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ContainerSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/internal-proxy/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 17, "ruleId": "CKV_K8S_30", "ruleName": "ContainerSecurityContext", "contextText": "17       - name: internal-api\n", "snippetText": "17       - name: internal-api\n        image: madhuakula/k8s-goat-internal-api\n        resources:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of containers with the NET_RAW capability.", "description": "CIS Benchmark: **5.2.7**\n\nDo not generally permit containers with the potentially dangerous NET_RAW capability.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. With Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers. Ideally, all containers should drop this capability. There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching. If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.requiredDropCapabilities` is set to include either `NET_RAW` or `ALL`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_28/2af0aef1e20f18d62c15d0f471f55d1a", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "DropCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with the NET_RAW capability.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/internal-proxy/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 17, "ruleId": "CKV_K8S_28", "ruleName": "DropCapabilities", "contextText": "17       - name: internal-api\n", "snippetText": "17       - name: internal-api\n        image: madhuakula/k8s-goat-internal-api\n        resources:\n"}, "tags": [{"key": "cis_category", "value": "5.2.7", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/dbc9526c1d8b088d45378fd296281c91", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/internal-proxy/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 17, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "17       - name: internal-api\n", "snippetText": "17       - name: internal-api\n        image: madhuakula/k8s-goat-internal-api\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Image Tag should be fixed - not latest or blank.", "description": "Image Tag should be fixed - not latest or blank.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_14/c1cc3e0e0028ff9357e6ed2268a3f84b", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageTagFixed", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Image Tag should be fixed - not latest or blank.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/internal-proxy/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 17, "ruleId": "CKV_K8S_14", "ruleName": "ImageTagFixed", "contextText": "17       - name: internal-api\n", "snippetText": "17       - name: internal-api\n        image: madhuakula/k8s-goat-internal-api\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Liveness Probe Should be Configured.", "description": "Liveness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_8/7005b3898a883ec9e7e84d80b83bc6ab", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "LivenessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Liveness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/internal-proxy/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 17, "ruleId": "CKV_K8S_8", "ruleName": "LivenessProbe", "contextText": "17       - name: internal-api\n", "snippetText": "17       - name: internal-api\n        image: madhuakula/k8s-goat-internal-api\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of containers with capabilities assigned.", "description": "CIS Benchmark: **5.2.9**\n\nMinimize the admission of containers with capabilities assigned.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user. In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\n## Remediation\n\nReview the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\n\n## Additional information\n\n- [Pod Security Policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities)", "internal_id": "CKV_K8S_37/fc61d285aade5d8bb6c4cd3197f563f6", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MinimizeCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with capabilities assigned.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/internal-proxy/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 17, "ruleId": "CKV_K8S_37", "ruleName": "MinimizeCapabilities", "contextText": "17       - name: internal-api\n", "snippetText": "17       - name: internal-api\n        image: madhuakula/k8s-goat-internal-api\n        resources:\n"}, "tags": [{"key": "cis_category", "value": "5.2.9", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/c5d02c27728a29376d951e17d56b2586", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/internal-proxy/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 17, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "17       - name: internal-api\n", "snippetText": "17       - name: internal-api\n        image: madhuakula/k8s-goat-internal-api\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Readiness Probe Should be Configured.", "description": "Readiness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_9/2fab4d2e64d5980fc0bfc273497c645d", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadinessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Readiness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/internal-proxy/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 17, "ruleId": "CKV_K8S_9", "ruleName": "ReadinessProbe", "contextText": "17       - name: internal-api\n", "snippetText": "17       - name: internal-api\n        image: madhuakula/k8s-goat-internal-api\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should not run with allowPrivilegeEscalation.", "description": "CIS Benchmark: **5.2.5**\n\nMinimize the admission of containers with allowPrivilegeEscalation.\n\nA container running with the allowPrivilegeEscalation flag set to true may have processes that can gain more privileges than their parent. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.allowPrivilegeEscalation` field is set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_20/8b32208b51400d36023c24337b9ea94d", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "AllowPrivilegeEscalation", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not run with allowPrivilegeEscalation.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/internal-proxy/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 28, "ruleId": "CKV_K8S_20", "ruleName": "AllowPrivilegeEscalation", "contextText": "28       - name: info-app\n", "snippetText": "28       - name: info-app\n        image: madhuakula/k8s-goat-info-app\n        resources:\n"}, "tags": [{"key": "cis_category", "value": "5.2.5", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_30/66bffa5c6c94a1fb795a7a107112c540", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ContainerSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/internal-proxy/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 28, "ruleId": "CKV_K8S_30", "ruleName": "ContainerSecurityContext", "contextText": "28       - name: info-app\n", "snippetText": "28       - name: info-app\n        image: madhuakula/k8s-goat-info-app\n        resources:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of containers with the NET_RAW capability.", "description": "CIS Benchmark: **5.2.7**\n\nDo not generally permit containers with the potentially dangerous NET_RAW capability.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. With Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers. Ideally, all containers should drop this capability. There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching. If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.requiredDropCapabilities` is set to include either `NET_RAW` or `ALL`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_28/a9356c5105b55546ace346f4f09580df", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "DropCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with the NET_RAW capability.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/internal-proxy/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 28, "ruleId": "CKV_K8S_28", "ruleName": "DropCapabilities", "contextText": "28       - name: info-app\n", "snippetText": "28       - name: info-app\n        image: madhuakula/k8s-goat-info-app\n        resources:\n"}, "tags": [{"key": "cis_category", "value": "5.2.7", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/7f5479ecc969fbe69df721626aed9425", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/internal-proxy/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 28, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "28       - name: info-app\n", "snippetText": "28       - name: info-app\n        image: madhuakula/k8s-goat-info-app\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Image Tag should be fixed - not latest or blank.", "description": "Image Tag should be fixed - not latest or blank.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_14/c7bd4eebeb71bdcca1cb213ccdc6e750", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageTagFixed", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Image Tag should be fixed - not latest or blank.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/internal-proxy/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 28, "ruleId": "CKV_K8S_14", "ruleName": "ImageTagFixed", "contextText": "28       - name: info-app\n", "snippetText": "28       - name: info-app\n        image: madhuakula/k8s-goat-info-app\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Liveness Probe Should be Configured.", "description": "Liveness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_8/a425a9c1c2cbcf104e2ce5d91aa760c8", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "LivenessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Liveness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/internal-proxy/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 28, "ruleId": "CKV_K8S_8", "ruleName": "LivenessProbe", "contextText": "28       - name: info-app\n", "snippetText": "28       - name: info-app\n        image: madhuakula/k8s-goat-info-app\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of containers with capabilities assigned.", "description": "CIS Benchmark: **5.2.9**\n\nMinimize the admission of containers with capabilities assigned.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user. In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\n## Remediation\n\nReview the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\n\n## Additional information\n\n- [Pod Security Policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities)", "internal_id": "CKV_K8S_37/58d630abf9964ab6fb80a91da39c735b", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MinimizeCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with capabilities assigned.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/internal-proxy/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 28, "ruleId": "CKV_K8S_37", "ruleName": "MinimizeCapabilities", "contextText": "28       - name: info-app\n", "snippetText": "28       - name: info-app\n        image: madhuakula/k8s-goat-info-app\n        resources:\n"}, "tags": [{"key": "cis_category", "value": "5.2.9", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/1fc5ce303470aa41a455f906dca2b8c3", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/internal-proxy/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 28, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "28       - name: info-app\n", "snippetText": "28       - name: info-app\n        image: madhuakula/k8s-goat-info-app\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Readiness Probe Should be Configured.", "description": "Readiness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_9/67c942eabbce731e04a8af611d11adf9", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadinessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Readiness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/internal-proxy/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 28, "ruleId": "CKV_K8S_9", "ruleName": "ReadinessProbe", "contextText": "28       - name: info-app\n", "snippetText": "28       - name: info-app\n        image: madhuakula/k8s-goat-info-app\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/3c730eed91a0935772200def84340e95", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/master-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 2, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "2 apiVersion: batch/v1\n", "snippetText": "2 apiVersion: batch/v1\nkind: Job\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_29/46398bd6c28d3b3a10904249006ed9e9", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PodSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/master-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 2, "ruleId": "CKV_K8S_29", "ruleName": "PodSecurityContext", "contextText": "2 apiVersion: batch/v1\n", "snippetText": "2 apiVersion: batch/v1\nkind: Job\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_23/9be363fecde616fbce742d8f7fcfcd56", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of root containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/master-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 2, "ruleId": "CKV_K8S_23", "ruleName": "RootContainers", "contextText": "2 apiVersion: batch/v1\n", "snippetText": "2 apiVersion: batch/v1\nkind: Job\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should run as a high UID to avoid host conflict.", "description": "Containers should run as a high UID to avoid host conflict.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_40/03bf6e41e51e370dd8fdedd0f7ef6dbe", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersHighUID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should run as a high UID to avoid host conflict.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/master-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 2, "ruleId": "CKV_K8S_40", "ruleName": "RootContainersHighUID", "contextText": "2 apiVersion: batch/v1\n", "snippetText": "2 apiVersion: batch/v1\nkind: Job\nmetadata:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_31/878ec86cf7f044ec678caaaae493bc71", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Seccomp", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/master-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 2, "ruleId": "CKV_K8S_31", "ruleName": "Seccomp", "contextText": "2 apiVersion: batch/v1\n", "snippetText": "2 apiVersion: batch/v1\nkind: Job\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Ensure that Service Account Tokens are only mounted where necessary.", "description": "CIS Benchmark: **5.1.6**\n\nEnsure that Service Account Tokens are only mounted where necessary.\n\nMounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue.\n\n## Remediation\n\nModify the definition of pods and service accounts which do not need to mount service account tokens to disable it.\n", "internal_id": "CKV_K8S_38/bc5226eb97ae089f6bdd408754e679a9", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ServiceAccountTokens", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that Service Account Tokens are only mounted where necessary.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/master-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 2, "ruleId": "CKV_K8S_38", "ruleName": "ServiceAccountTokens", "contextText": "2 apiVersion: batch/v1\n", "snippetText": "2 apiVersion: batch/v1\nkind: Job\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.1.6", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should not share the host process ID namespace.", "description": "CIS Benchmark: **5.2.2**\n\nMinimize the admission of containers wishing to share the host process ID namespace.\n\nA container running in the host's PID namespace can inspect processes running outside the container. If the container also has access to ptrace capabilities this can be used to escalate privileges outside of the container. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to share the host PID namespace. If you need to run containers which require hostPID, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.hostPID` field is omitted or set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  hostNetwork: false\n  hostIPC: false\n  hostPID: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privileged)", "internal_id": "CKV_K8S_17/6cf4057ec5900560fe2ff7b4c762e546", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "ShareHostPID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not share the host process ID namespace.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/master-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 2, "ruleId": "CKV_K8S_17", "ruleName": "ShareHostPID", "contextText": "2 apiVersion: batch/v1\n", "snippetText": "2 apiVersion: batch/v1\nkind: Job\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.2", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should not run with allowPrivilegeEscalation.", "description": "CIS Benchmark: **5.2.5**\n\nMinimize the admission of containers with allowPrivilegeEscalation.\n\nA container running with the allowPrivilegeEscalation flag set to true may have processes that can gain more privileges than their parent. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.allowPrivilegeEscalation` field is set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_20/6865b4c4d80c6a2396b80e629be41ef2", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "AllowPrivilegeEscalation", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not run with allowPrivilegeEscalation.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/master-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 17, "ruleId": "CKV_K8S_20", "ruleName": "AllowPrivilegeEscalation", "contextText": "17         - name: kube-bench\n", "snippetText": "17         - name: kube-bench\n          image: aquasec/kube-bench:latest\n          command: [\"kube-bench\", \"master\"]\n"}, "tags": [{"key": "cis_category", "value": "5.2.5", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "CPU limits should be set.", "description": "CPU limits should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_11/4341eea0beb8e67626c9dbc462263a33", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPULimits", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU limits should be set.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/master-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 17, "ruleId": "CKV_K8S_11", "ruleName": "CPULimits", "contextText": "17         - name: kube-bench\n", "snippetText": "17         - name: kube-bench\n          image: aquasec/kube-bench:latest\n          command: [\"kube-bench\", \"master\"]\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "CPU requests should be set.", "description": "CPU requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_10/b985679f1f2d83903dcc7aa7ca31681d", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPURequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU requests should be set.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/master-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 17, "ruleId": "CKV_K8S_10", "ruleName": "CPURequests", "contextText": "17         - name: kube-bench\n", "snippetText": "17         - name: kube-bench\n          image: aquasec/kube-bench:latest\n          command: [\"kube-bench\", \"master\"]\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_30/21a9d50fcc6ce3481d26ab658f704ecf", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ContainerSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/master-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 17, "ruleId": "CKV_K8S_30", "ruleName": "ContainerSecurityContext", "contextText": "17         - name: kube-bench\n", "snippetText": "17         - name: kube-bench\n          image: aquasec/kube-bench:latest\n          command: [\"kube-bench\", \"master\"]\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of containers with the NET_RAW capability.", "description": "CIS Benchmark: **5.2.7**\n\nDo not generally permit containers with the potentially dangerous NET_RAW capability.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. With Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers. Ideally, all containers should drop this capability. There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching. If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.requiredDropCapabilities` is set to include either `NET_RAW` or `ALL`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_28/d6b7a6589dd352c6b80480b90ed90ba9", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "DropCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with the NET_RAW capability.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/master-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 17, "ruleId": "CKV_K8S_28", "ruleName": "DropCapabilities", "contextText": "17         - name: kube-bench\n", "snippetText": "17         - name: kube-bench\n          image: aquasec/kube-bench:latest\n          command: [\"kube-bench\", \"master\"]\n"}, "tags": [{"key": "cis_category", "value": "5.2.7", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/e7be03aea16e053eac917e402758e13b", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/master-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 17, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "17         - name: kube-bench\n", "snippetText": "17         - name: kube-bench\n          image: aquasec/kube-bench:latest\n          command: [\"kube-bench\", \"master\"]\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Image Tag should be fixed - not latest or blank.", "description": "Image Tag should be fixed - not latest or blank.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_14/e975f4c6cc2a11e449c93a64f3fce444", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageTagFixed", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Image Tag should be fixed - not latest or blank.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/master-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 17, "ruleId": "CKV_K8S_14", "ruleName": "ImageTagFixed", "contextText": "17         - name: kube-bench\n", "snippetText": "17         - name: kube-bench\n          image: aquasec/kube-bench:latest\n          command: [\"kube-bench\", \"master\"]\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Memory limits should be set.", "description": "Memory limits should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_13/488a9527810d69e40055de18594de52f", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryLimits", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory limits should be set.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/master-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 17, "ruleId": "CKV_K8S_13", "ruleName": "MemoryLimits", "contextText": "17         - name: kube-bench\n", "snippetText": "17         - name: kube-bench\n          image: aquasec/kube-bench:latest\n          command: [\"kube-bench\", \"master\"]\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Memory requests should be set.", "description": "Memory requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_12/ed639004b123872c7d6882eedd57cbfe", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryRequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory requests should be set.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/master-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 17, "ruleId": "CKV_K8S_12", "ruleName": "MemoryRequests", "contextText": "17         - name: kube-bench\n", "snippetText": "17         - name: kube-bench\n          image: aquasec/kube-bench:latest\n          command: [\"kube-bench\", \"master\"]\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of containers with capabilities assigned.", "description": "CIS Benchmark: **5.2.9**\n\nMinimize the admission of containers with capabilities assigned.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user. In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\n## Remediation\n\nReview the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\n\n## Additional information\n\n- [Pod Security Policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities)", "internal_id": "CKV_K8S_37/fd6ac111ecd11a69bf138b5dbbd704ca", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MinimizeCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with capabilities assigned.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/master-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 17, "ruleId": "CKV_K8S_37", "ruleName": "MinimizeCapabilities", "contextText": "17         - name: kube-bench\n", "snippetText": "17         - name: kube-bench\n          image: aquasec/kube-bench:latest\n          command: [\"kube-bench\", \"master\"]\n"}, "tags": [{"key": "cis_category", "value": "5.2.9", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/9092a22867e71433221dcc4d0163e114", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/master-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 17, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "17         - name: kube-bench\n", "snippetText": "17         - name: kube-bench\n          image: aquasec/kube-bench:latest\n          command: [\"kube-bench\", \"master\"]\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/b86bcb09c3859d1dbfc38cb2e3add81e", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/node-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 2, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "2 apiVersion: batch/v1\n", "snippetText": "2 apiVersion: batch/v1\nkind: Job\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_29/21e4bc7af2e6ce51203e79fc1431f904", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PodSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/node-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 2, "ruleId": "CKV_K8S_29", "ruleName": "PodSecurityContext", "contextText": "2 apiVersion: batch/v1\n", "snippetText": "2 apiVersion: batch/v1\nkind: Job\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_23/f4bb7227cf07cb048d87dc79a6d8e28b", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of root containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/node-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 2, "ruleId": "CKV_K8S_23", "ruleName": "RootContainers", "contextText": "2 apiVersion: batch/v1\n", "snippetText": "2 apiVersion: batch/v1\nkind: Job\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should run as a high UID to avoid host conflict.", "description": "Containers should run as a high UID to avoid host conflict.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_40/f16655539658491ab6d69f58562ff7e3", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersHighUID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should run as a high UID to avoid host conflict.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/node-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 2, "ruleId": "CKV_K8S_40", "ruleName": "RootContainersHighUID", "contextText": "2 apiVersion: batch/v1\n", "snippetText": "2 apiVersion: batch/v1\nkind: Job\nmetadata:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_31/9c32eb70f801c1f1764cbcd3baf869e6", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Seccomp", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/node-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 2, "ruleId": "CKV_K8S_31", "ruleName": "Seccomp", "contextText": "2 apiVersion: batch/v1\n", "snippetText": "2 apiVersion: batch/v1\nkind: Job\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Ensure that Service Account Tokens are only mounted where necessary.", "description": "CIS Benchmark: **5.1.6**\n\nEnsure that Service Account Tokens are only mounted where necessary.\n\nMounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue.\n\n## Remediation\n\nModify the definition of pods and service accounts which do not need to mount service account tokens to disable it.\n", "internal_id": "CKV_K8S_38/a69a3d3ac09a74eecd5636b8da0c6c9e", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ServiceAccountTokens", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that Service Account Tokens are only mounted where necessary.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/node-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 2, "ruleId": "CKV_K8S_38", "ruleName": "ServiceAccountTokens", "contextText": "2 apiVersion: batch/v1\n", "snippetText": "2 apiVersion: batch/v1\nkind: Job\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.1.6", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should not share the host process ID namespace.", "description": "CIS Benchmark: **5.2.2**\n\nMinimize the admission of containers wishing to share the host process ID namespace.\n\nA container running in the host's PID namespace can inspect processes running outside the container. If the container also has access to ptrace capabilities this can be used to escalate privileges outside of the container. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to share the host PID namespace. If you need to run containers which require hostPID, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.hostPID` field is omitted or set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  hostNetwork: false\n  hostIPC: false\n  hostPID: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privileged)", "internal_id": "CKV_K8S_17/ca707135affcd7f06fb851450694f2b3", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "ShareHostPID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not share the host process ID namespace.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/node-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 2, "ruleId": "CKV_K8S_17", "ruleName": "ShareHostPID", "contextText": "2 apiVersion: batch/v1\n", "snippetText": "2 apiVersion: batch/v1\nkind: Job\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.2", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should not run with allowPrivilegeEscalation.", "description": "CIS Benchmark: **5.2.5**\n\nMinimize the admission of containers with allowPrivilegeEscalation.\n\nA container running with the allowPrivilegeEscalation flag set to true may have processes that can gain more privileges than their parent. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.allowPrivilegeEscalation` field is set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_20/d5eae832e7dbd06bdaad93fa8f29cf30", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "AllowPrivilegeEscalation", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not run with allowPrivilegeEscalation.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/node-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 11, "ruleId": "CKV_K8S_20", "ruleName": "AllowPrivilegeEscalation", "contextText": "11         - name: kube-bench\n", "snippetText": "11         - name: kube-bench\n          image: aquasec/kube-bench:latest\n          # command: [\"kube-bench\", \"--benchmark\", \"gke-1.0\", \"run\", \"--targets\", \"node,policies,managedservices\"]\n"}, "tags": [{"key": "cis_category", "value": "5.2.5", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "CPU limits should be set.", "description": "CPU limits should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_11/df3d96c3b94e7778b86d6225b5d0124b", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPULimits", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU limits should be set.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/node-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 11, "ruleId": "CKV_K8S_11", "ruleName": "CPULimits", "contextText": "11         - name: kube-bench\n", "snippetText": "11         - name: kube-bench\n          image: aquasec/kube-bench:latest\n          # command: [\"kube-bench\", \"--benchmark\", \"gke-1.0\", \"run\", \"--targets\", \"node,policies,managedservices\"]\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "CPU requests should be set.", "description": "CPU requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_10/7b31f5e7b22eb90655c644b72bd52240", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPURequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU requests should be set.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/node-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 11, "ruleId": "CKV_K8S_10", "ruleName": "CPURequests", "contextText": "11         - name: kube-bench\n", "snippetText": "11         - name: kube-bench\n          image: aquasec/kube-bench:latest\n          # command: [\"kube-bench\", \"--benchmark\", \"gke-1.0\", \"run\", \"--targets\", \"node,policies,managedservices\"]\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_30/1dde8f60f8aa58ccfd24b54cd4b49831", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ContainerSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/node-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 11, "ruleId": "CKV_K8S_30", "ruleName": "ContainerSecurityContext", "contextText": "11         - name: kube-bench\n", "snippetText": "11         - name: kube-bench\n          image: aquasec/kube-bench:latest\n          # command: [\"kube-bench\", \"--benchmark\", \"gke-1.0\", \"run\", \"--targets\", \"node,policies,managedservices\"]\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of containers with the NET_RAW capability.", "description": "CIS Benchmark: **5.2.7**\n\nDo not generally permit containers with the potentially dangerous NET_RAW capability.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. With Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers. Ideally, all containers should drop this capability. There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching. If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.requiredDropCapabilities` is set to include either `NET_RAW` or `ALL`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_28/99e0e0060a7a0fabd2b018492f0ea133", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "DropCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with the NET_RAW capability.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/node-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 11, "ruleId": "CKV_K8S_28", "ruleName": "DropCapabilities", "contextText": "11         - name: kube-bench\n", "snippetText": "11         - name: kube-bench\n          image: aquasec/kube-bench:latest\n          # command: [\"kube-bench\", \"--benchmark\", \"gke-1.0\", \"run\", \"--targets\", \"node,policies,managedservices\"]\n"}, "tags": [{"key": "cis_category", "value": "5.2.7", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/b99e9f56286163db1d7837f6abfdb3aa", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/node-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 11, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "11         - name: kube-bench\n", "snippetText": "11         - name: kube-bench\n          image: aquasec/kube-bench:latest\n          # command: [\"kube-bench\", \"--benchmark\", \"gke-1.0\", \"run\", \"--targets\", \"node,policies,managedservices\"]\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Image Tag should be fixed - not latest or blank.", "description": "Image Tag should be fixed - not latest or blank.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_14/042e3e883fb78926c0f53f8c67af8aa6", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageTagFixed", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Image Tag should be fixed - not latest or blank.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/node-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 11, "ruleId": "CKV_K8S_14", "ruleName": "ImageTagFixed", "contextText": "11         - name: kube-bench\n", "snippetText": "11         - name: kube-bench\n          image: aquasec/kube-bench:latest\n          # command: [\"kube-bench\", \"--benchmark\", \"gke-1.0\", \"run\", \"--targets\", \"node,policies,managedservices\"]\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Memory limits should be set.", "description": "Memory limits should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_13/b9866508ab6e4a370d32902c9066a132", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryLimits", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory limits should be set.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/node-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 11, "ruleId": "CKV_K8S_13", "ruleName": "MemoryLimits", "contextText": "11         - name: kube-bench\n", "snippetText": "11         - name: kube-bench\n          image: aquasec/kube-bench:latest\n          # command: [\"kube-bench\", \"--benchmark\", \"gke-1.0\", \"run\", \"--targets\", \"node,policies,managedservices\"]\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Memory requests should be set.", "description": "Memory requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_12/c389348fb333bb8524a98b000a688fbe", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryRequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory requests should be set.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/node-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 11, "ruleId": "CKV_K8S_12", "ruleName": "MemoryRequests", "contextText": "11         - name: kube-bench\n", "snippetText": "11         - name: kube-bench\n          image: aquasec/kube-bench:latest\n          # command: [\"kube-bench\", \"--benchmark\", \"gke-1.0\", \"run\", \"--targets\", \"node,policies,managedservices\"]\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of containers with capabilities assigned.", "description": "CIS Benchmark: **5.2.9**\n\nMinimize the admission of containers with capabilities assigned.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user. In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\n## Remediation\n\nReview the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\n\n## Additional information\n\n- [Pod Security Policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities)", "internal_id": "CKV_K8S_37/7977b3351a48ad0e608db00dfda72721", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MinimizeCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with capabilities assigned.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/node-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 11, "ruleId": "CKV_K8S_37", "ruleName": "MinimizeCapabilities", "contextText": "11         - name: kube-bench\n", "snippetText": "11         - name: kube-bench\n          image: aquasec/kube-bench:latest\n          # command: [\"kube-bench\", \"--benchmark\", \"gke-1.0\", \"run\", \"--targets\", \"node,policies,managedservices\"]\n"}, "tags": [{"key": "cis_category", "value": "5.2.9", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/f2052dbb4fff9a5f879efe6df9c6f600", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kube-bench-security/node-job.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 11, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "11         - name: kube-bench\n", "snippetText": "11         - name: kube-bench\n          image: aquasec/kube-bench:latest\n          # command: [\"kube-bench\", \"--benchmark\", \"gke-1.0\", \"run\", \"--targets\", \"node,policies,managedservices\"]\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/2ae8d668abc339ae0ba3ed71b2324b51", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kubernetes-goat-home/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_29/9cb765f0668c2d021a636fed4a431d38", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PodSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kubernetes-goat-home/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_29", "ruleName": "PodSecurityContext", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_23/7df3c6962969aa8e3f77a160295effe3", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of root containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kubernetes-goat-home/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_23", "ruleName": "RootContainers", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should run as a high UID to avoid host conflict.", "description": "Containers should run as a high UID to avoid host conflict.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_40/d821ce9a373ee126857b5e9e153449a3", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersHighUID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should run as a high UID to avoid host conflict.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kubernetes-goat-home/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_40", "ruleName": "RootContainersHighUID", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_31/9de568311d6cc9348bb775a675573739", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Seccomp", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kubernetes-goat-home/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_31", "ruleName": "Seccomp", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Ensure that Service Account Tokens are only mounted where necessary.", "description": "CIS Benchmark: **5.1.6**\n\nEnsure that Service Account Tokens are only mounted where necessary.\n\nMounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue.\n\n## Remediation\n\nModify the definition of pods and service accounts which do not need to mount service account tokens to disable it.\n", "internal_id": "CKV_K8S_38/276534e8d87f05ac9a4eceb7bb9e2f6c", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ServiceAccountTokens", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that Service Account Tokens are only mounted where necessary.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kubernetes-goat-home/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_38", "ruleName": "ServiceAccountTokens", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.1.6", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/437b9c712ca52e9f1c01198fe47abeed", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kubernetes-goat-home/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 24, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "24 apiVersion: v1\n", "snippetText": "24 apiVersion: v1\nkind: Service\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should not run with allowPrivilegeEscalation.", "description": "CIS Benchmark: **5.2.5**\n\nMinimize the admission of containers with allowPrivilegeEscalation.\n\nA container running with the allowPrivilegeEscalation flag set to true may have processes that can gain more privileges than their parent. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.allowPrivilegeEscalation` field is set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_20/55af886e0341fb5a044ad13af400b71a", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "AllowPrivilegeEscalation", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not run with allowPrivilegeEscalation.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kubernetes-goat-home/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_20", "ruleName": "AllowPrivilegeEscalation", "contextText": "15       - name: kubernetes-goat-home\n", "snippetText": "15       - name: kubernetes-goat-home\n        image: madhuakula/k8s-goat-home\n        resources:\n"}, "tags": [{"key": "cis_category", "value": "5.2.5", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "CPU requests should be set.", "description": "CPU requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_10/aefef0e529baff85c74746e26054e12b", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPURequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU requests should be set.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kubernetes-goat-home/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_10", "ruleName": "CPURequests", "contextText": "15       - name: kubernetes-goat-home\n", "snippetText": "15       - name: kubernetes-goat-home\n        image: madhuakula/k8s-goat-home\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_30/fe738b4332b1243b8d4a7585c1f9e442", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ContainerSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kubernetes-goat-home/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_30", "ruleName": "ContainerSecurityContext", "contextText": "15       - name: kubernetes-goat-home\n", "snippetText": "15       - name: kubernetes-goat-home\n        image: madhuakula/k8s-goat-home\n        resources:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of containers with the NET_RAW capability.", "description": "CIS Benchmark: **5.2.7**\n\nDo not generally permit containers with the potentially dangerous NET_RAW capability.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. With Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers. Ideally, all containers should drop this capability. There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching. If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.requiredDropCapabilities` is set to include either `NET_RAW` or `ALL`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_28/1820628bad2dfb7c20b9b48f62208eb1", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "DropCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with the NET_RAW capability.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kubernetes-goat-home/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_28", "ruleName": "DropCapabilities", "contextText": "15       - name: kubernetes-goat-home\n", "snippetText": "15       - name: kubernetes-goat-home\n        image: madhuakula/k8s-goat-home\n        resources:\n"}, "tags": [{"key": "cis_category", "value": "5.2.7", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/48605b59eb5fea9f3b7b0d2ceddf3f68", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kubernetes-goat-home/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "15       - name: kubernetes-goat-home\n", "snippetText": "15       - name: kubernetes-goat-home\n        image: madhuakula/k8s-goat-home\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Image Tag should be fixed - not latest or blank.", "description": "Image Tag should be fixed - not latest or blank.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_14/bb9cba633cbcb653c55606130075580f", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageTagFixed", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Image Tag should be fixed - not latest or blank.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kubernetes-goat-home/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_14", "ruleName": "ImageTagFixed", "contextText": "15       - name: kubernetes-goat-home\n", "snippetText": "15       - name: kubernetes-goat-home\n        image: madhuakula/k8s-goat-home\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Liveness Probe Should be Configured.", "description": "Liveness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_8/f402f5bb1a378b62cacc99986ea9800c", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "LivenessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Liveness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kubernetes-goat-home/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_8", "ruleName": "LivenessProbe", "contextText": "15       - name: kubernetes-goat-home\n", "snippetText": "15       - name: kubernetes-goat-home\n        image: madhuakula/k8s-goat-home\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Memory requests should be set.", "description": "Memory requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_12/67c827b9ab26a3fe42835aa72ebbcbb6", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryRequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory requests should be set.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kubernetes-goat-home/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_12", "ruleName": "MemoryRequests", "contextText": "15       - name: kubernetes-goat-home\n", "snippetText": "15       - name: kubernetes-goat-home\n        image: madhuakula/k8s-goat-home\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of containers with capabilities assigned.", "description": "CIS Benchmark: **5.2.9**\n\nMinimize the admission of containers with capabilities assigned.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user. In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\n## Remediation\n\nReview the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\n\n## Additional information\n\n- [Pod Security Policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities)", "internal_id": "CKV_K8S_37/0c74a6900437faefa35d67ec712086f3", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MinimizeCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with capabilities assigned.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kubernetes-goat-home/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_37", "ruleName": "MinimizeCapabilities", "contextText": "15       - name: kubernetes-goat-home\n", "snippetText": "15       - name: kubernetes-goat-home\n        image: madhuakula/k8s-goat-home\n        resources:\n"}, "tags": [{"key": "cis_category", "value": "5.2.9", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/9d3b5c791a3a8a21458f587d8580b763", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kubernetes-goat-home/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "15       - name: kubernetes-goat-home\n", "snippetText": "15       - name: kubernetes-goat-home\n        image: madhuakula/k8s-goat-home\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Readiness Probe Should be Configured.", "description": "Readiness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_9/ec5042d04801fa85ea40525e5ca16b54", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadinessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Readiness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/kubernetes-goat-home/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_9", "ruleName": "ReadinessProbe", "contextText": "15       - name: kubernetes-goat-home\n", "snippetText": "15       - name: kubernetes-goat-home\n        image: madhuakula/k8s-goat-home\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/e2938f634aa70d5fd9bb02e8c88570d8", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/poor-registry/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_29/bc6885efa7c0cf80a6080c012bce9ee2", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PodSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/poor-registry/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_29", "ruleName": "PodSecurityContext", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_23/bedf28699121144aa7c920852d80dde6", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of root containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/poor-registry/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_23", "ruleName": "RootContainers", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should run as a high UID to avoid host conflict.", "description": "Containers should run as a high UID to avoid host conflict.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_40/895880fa0771efdb7222dd4de9361833", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersHighUID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should run as a high UID to avoid host conflict.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/poor-registry/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_40", "ruleName": "RootContainersHighUID", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_31/6d54e919447a680c36605e2e52671058", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Seccomp", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/poor-registry/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_31", "ruleName": "Seccomp", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Ensure that Service Account Tokens are only mounted where necessary.", "description": "CIS Benchmark: **5.1.6**\n\nEnsure that Service Account Tokens are only mounted where necessary.\n\nMounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue.\n\n## Remediation\n\nModify the definition of pods and service accounts which do not need to mount service account tokens to disable it.\n", "internal_id": "CKV_K8S_38/70ec8a1e8901c92dda88dd2adfd1ad41", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ServiceAccountTokens", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that Service Account Tokens are only mounted where necessary.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/poor-registry/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_38", "ruleName": "ServiceAccountTokens", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.1.6", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/85cfeccf14703424a9384f977a3e4a91", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/poor-registry/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 24, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "24 apiVersion: v1\n", "snippetText": "24 apiVersion: v1\nkind: Service\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should not run with allowPrivilegeEscalation.", "description": "CIS Benchmark: **5.2.5**\n\nMinimize the admission of containers with allowPrivilegeEscalation.\n\nA container running with the allowPrivilegeEscalation flag set to true may have processes that can gain more privileges than their parent. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.allowPrivilegeEscalation` field is set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_20/76b6523897c5e3485797753c18936d20", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "AllowPrivilegeEscalation", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not run with allowPrivilegeEscalation.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/poor-registry/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_20", "ruleName": "AllowPrivilegeEscalation", "contextText": "15       - name: poor-registry\n", "snippetText": "15       - name: poor-registry\n        image: madhuakula/k8s-goat-poor-registry\n        resources:\n"}, "tags": [{"key": "cis_category", "value": "5.2.5", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "CPU requests should be set.", "description": "CPU requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_10/64bbc74713e2201baf268f0ab1f0b763", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPURequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU requests should be set.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/poor-registry/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_10", "ruleName": "CPURequests", "contextText": "15       - name: poor-registry\n", "snippetText": "15       - name: poor-registry\n        image: madhuakula/k8s-goat-poor-registry\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_30/d25f217fc0606fd90b654429aee85c7c", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ContainerSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/poor-registry/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_30", "ruleName": "ContainerSecurityContext", "contextText": "15       - name: poor-registry\n", "snippetText": "15       - name: poor-registry\n        image: madhuakula/k8s-goat-poor-registry\n        resources:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of containers with the NET_RAW capability.", "description": "CIS Benchmark: **5.2.7**\n\nDo not generally permit containers with the potentially dangerous NET_RAW capability.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. With Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers. Ideally, all containers should drop this capability. There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching. If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.requiredDropCapabilities` is set to include either `NET_RAW` or `ALL`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_28/8073168d11e2f6f874dcf5642a457b53", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "DropCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with the NET_RAW capability.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/poor-registry/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_28", "ruleName": "DropCapabilities", "contextText": "15       - name: poor-registry\n", "snippetText": "15       - name: poor-registry\n        image: madhuakula/k8s-goat-poor-registry\n        resources:\n"}, "tags": [{"key": "cis_category", "value": "5.2.7", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/0a6dbebf154cb418077431b2388be23a", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/poor-registry/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "15       - name: poor-registry\n", "snippetText": "15       - name: poor-registry\n        image: madhuakula/k8s-goat-poor-registry\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Image Tag should be fixed - not latest or blank.", "description": "Image Tag should be fixed - not latest or blank.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_14/8b67b4031d31199f06ec304cdc44207e", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageTagFixed", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Image Tag should be fixed - not latest or blank.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/poor-registry/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_14", "ruleName": "ImageTagFixed", "contextText": "15       - name: poor-registry\n", "snippetText": "15       - name: poor-registry\n        image: madhuakula/k8s-goat-poor-registry\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Liveness Probe Should be Configured.", "description": "Liveness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_8/f8ee5b8cafb7b7191a9ce158577fd029", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "LivenessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Liveness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/poor-registry/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_8", "ruleName": "LivenessProbe", "contextText": "15       - name: poor-registry\n", "snippetText": "15       - name: poor-registry\n        image: madhuakula/k8s-goat-poor-registry\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Memory requests should be set.", "description": "Memory requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_12/6acc9e74ccb2a5aef58c772517b626c0", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryRequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory requests should be set.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/poor-registry/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_12", "ruleName": "MemoryRequests", "contextText": "15       - name: poor-registry\n", "snippetText": "15       - name: poor-registry\n        image: madhuakula/k8s-goat-poor-registry\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of containers with capabilities assigned.", "description": "CIS Benchmark: **5.2.9**\n\nMinimize the admission of containers with capabilities assigned.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user. In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\n## Remediation\n\nReview the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\n\n## Additional information\n\n- [Pod Security Policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities)", "internal_id": "CKV_K8S_37/5f71f97c6cdadac0e687219ad3dd7724", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MinimizeCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with capabilities assigned.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/poor-registry/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_37", "ruleName": "MinimizeCapabilities", "contextText": "15       - name: poor-registry\n", "snippetText": "15       - name: poor-registry\n        image: madhuakula/k8s-goat-poor-registry\n        resources:\n"}, "tags": [{"key": "cis_category", "value": "5.2.9", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/b9e6757f441e85597e4b145ac3777454", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/poor-registry/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "15       - name: poor-registry\n", "snippetText": "15       - name: poor-registry\n        image: madhuakula/k8s-goat-poor-registry\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Readiness Probe Should be Configured.", "description": "Readiness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_9/4ed102bf4bd5c2af88c8b044548d79f6", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadinessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Readiness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/poor-registry/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_9", "ruleName": "ReadinessProbe", "contextText": "15       - name: poor-registry\n", "snippetText": "15       - name: poor-registry\n        image: madhuakula/k8s-goat-poor-registry\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/1f1ded6a5028e711463cbd39336646f0", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/system-monitor/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "1 apiVersion: v1\n", "snippetText": "1 apiVersion: v1\nkind: Secret\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/6739fe3a9912efaa12b614ff19fb3969", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/system-monitor/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 10, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "10 apiVersion: apps/v1\n", "snippetText": "10 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_29/a36608d25a4774875f030efc77ec4fc9", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PodSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/system-monitor/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 10, "ruleId": "CKV_K8S_29", "ruleName": "PodSecurityContext", "contextText": "10 apiVersion: apps/v1\n", "snippetText": "10 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_23/5613d877723ab6a9b95b1f10c4d5a7c4", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of root containers.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/system-monitor/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 10, "ruleId": "CKV_K8S_23", "ruleName": "RootContainers", "contextText": "10 apiVersion: apps/v1\n", "snippetText": "10 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should run as a high UID to avoid host conflict.", "description": "Containers should run as a high UID to avoid host conflict.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_40/e3d3ccda74fa30784d006e78c088084a", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersHighUID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should run as a high UID to avoid host conflict.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/system-monitor/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 10, "ruleId": "CKV_K8S_40", "ruleName": "RootContainersHighUID", "contextText": "10 apiVersion: apps/v1\n", "snippetText": "10 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_31/2fec30af458919c040736131dd4fdaf3", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Seccomp", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/system-monitor/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 10, "ruleId": "CKV_K8S_31", "ruleName": "Seccomp", "contextText": "10 apiVersion: apps/v1\n", "snippetText": "10 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Ensure that Service Account Tokens are only mounted where necessary.", "description": "CIS Benchmark: **5.1.6**\n\nEnsure that Service Account Tokens are only mounted where necessary.\n\nMounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue.\n\n## Remediation\n\nModify the definition of pods and service accounts which do not need to mount service account tokens to disable it.\n", "internal_id": "CKV_K8S_38/fcfd3a614cb76c1b2f8b89c3d12c523d", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ServiceAccountTokens", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that Service Account Tokens are only mounted where necessary.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/system-monitor/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 10, "ruleId": "CKV_K8S_38", "ruleName": "ServiceAccountTokens", "contextText": "10 apiVersion: apps/v1\n", "snippetText": "10 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.1.6", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should not share the host IPC namespace.", "description": "CIS Benchmark: **5.2.3**\n\nMinimize the admission of containers wishing to share the host IPC namespace.\n\nA container running in the host's IPC namespace can use IPC to interact with processes outside the container. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to share the host IPC namespace. If you have a requirement to containers which require hostIPC, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.hostIPC` field is omitted or set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  hostNetwork: false\n  hostIPC: false\n  hostPID: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Host namespaces](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces)", "internal_id": "CKV_K8S_18/a9ca7591e20e136e9ba2d3c819311adc", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "ShareHostIPC", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not share the host IPC namespace.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/system-monitor/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 10, "ruleId": "CKV_K8S_18", "ruleName": "ShareHostIPC", "contextText": "10 apiVersion: apps/v1\n", "snippetText": "10 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.3", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should not share the host process ID namespace.", "description": "CIS Benchmark: **5.2.2**\n\nMinimize the admission of containers wishing to share the host process ID namespace.\n\nA container running in the host's PID namespace can inspect processes running outside the container. If the container also has access to ptrace capabilities this can be used to escalate privileges outside of the container. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to share the host PID namespace. If you need to run containers which require hostPID, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.hostPID` field is omitted or set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  hostNetwork: false\n  hostIPC: false\n  hostPID: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privileged)", "internal_id": "CKV_K8S_17/bca6eaede580b25db97993b37c9d44be", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "ShareHostPID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not share the host process ID namespace.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/system-monitor/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 10, "ruleId": "CKV_K8S_17", "ruleName": "ShareHostPID", "contextText": "10 apiVersion: apps/v1\n", "snippetText": "10 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.2", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should not share the host network namespace.", "description": "CIS Benchmark: **5.2.4**\n\nMinimize the admission of containers wishing to share the host network namespace.\n\nA container running in the host's network namespace could access the local loopback device, and could access network traffic to and from other pods. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to share the host network namespace. If you have need to run containers which require hostNetwork, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.hostNetwork` field is omitted or set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  hostNetwork: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Host namespaces](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces)", "internal_id": "CKV_K8S_19/aea36a7fee9897829ef2e53b0d9a4a5e", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "SharedHostNetworkNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not share the host network namespace.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/system-monitor/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 10, "ruleId": "CKV_K8S_19", "ruleName": "SharedHostNetworkNamespace", "contextText": "10 apiVersion: apps/v1\n", "snippetText": "10 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/331a6c147ab8e4053dfd4ad0e5e25d55", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/system-monitor/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 52, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "52 apiVersion: v1\n", "snippetText": "52 apiVersion: v1\nkind: Service\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Containers should not run with allowPrivilegeEscalation.", "description": "CIS Benchmark: **5.2.5**\n\nMinimize the admission of containers with allowPrivilegeEscalation.\n\nA container running with the allowPrivilegeEscalation flag set to true may have processes that can gain more privileges than their parent. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.allowPrivilegeEscalation` field is set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_20/4ab2749dc1d4d7ed82e2318dedff4fd7", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "AllowPrivilegeEscalation", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not run with allowPrivilegeEscalation.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/system-monitor/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 31, "ruleId": "CKV_K8S_20", "ruleName": "AllowPrivilegeEscalation", "contextText": "31       - name: system-monitor\n", "snippetText": "31       - name: system-monitor\n        image: madhuakula/k8s-goat-system-monitor\n        resources:\n"}, "tags": [{"key": "cis_category", "value": "5.2.5", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "CPU requests should be set.", "description": "CPU requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_10/104f5c249d79c035acb84518ab6f6aa0", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPURequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU requests should be set.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/system-monitor/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 31, "ruleId": "CKV_K8S_10", "ruleName": "CPURequests", "contextText": "31       - name: system-monitor\n", "snippetText": "31       - name: system-monitor\n        image: madhuakula/k8s-goat-system-monitor\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of containers with the NET_RAW capability.", "description": "CIS Benchmark: **5.2.7**\n\nDo not generally permit containers with the potentially dangerous NET_RAW capability.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. With Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers. Ideally, all containers should drop this capability. There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching. If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.requiredDropCapabilities` is set to include either `NET_RAW` or `ALL`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_28/53bd63061b625b16ff6a4234ba642526", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "DropCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with the NET_RAW capability.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/system-monitor/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 31, "ruleId": "CKV_K8S_28", "ruleName": "DropCapabilities", "contextText": "31       - name: system-monitor\n", "snippetText": "31       - name: system-monitor\n        image: madhuakula/k8s-goat-system-monitor\n        resources:\n"}, "tags": [{"key": "cis_category", "value": "5.2.7", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/d32b992784600621a9d534ebee1d5bf3", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/system-monitor/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 31, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "31       - name: system-monitor\n", "snippetText": "31       - name: system-monitor\n        image: madhuakula/k8s-goat-system-monitor\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Image Tag should be fixed - not latest or blank.", "description": "Image Tag should be fixed - not latest or blank.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_14/7a388a3570eb41ec4e1679ef5106a0ac", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageTagFixed", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Image Tag should be fixed - not latest or blank.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/system-monitor/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 31, "ruleId": "CKV_K8S_14", "ruleName": "ImageTagFixed", "contextText": "31       - name: system-monitor\n", "snippetText": "31       - name: system-monitor\n        image: madhuakula/k8s-goat-system-monitor\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Liveness Probe Should be Configured.", "description": "Liveness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_8/441c60021d0d8595c73f7bc4fbc8caee", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "LivenessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Liveness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/system-monitor/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 31, "ruleId": "CKV_K8S_8", "ruleName": "LivenessProbe", "contextText": "31       - name: system-monitor\n", "snippetText": "31       - name: system-monitor\n        image: madhuakula/k8s-goat-system-monitor\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Memory requests should be set.", "description": "Memory requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_12/c9a0b8df68447a037733c042a0012b5f", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryRequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory requests should be set.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/system-monitor/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 31, "ruleId": "CKV_K8S_12", "ruleName": "MemoryRequests", "contextText": "31       - name: system-monitor\n", "snippetText": "31       - name: system-monitor\n        image: madhuakula/k8s-goat-system-monitor\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Minimize the admission of containers with capabilities assigned.", "description": "CIS Benchmark: **5.2.9**\n\nMinimize the admission of containers with capabilities assigned.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user. In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\n## Remediation\n\nReview the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\n\n## Additional information\n\n- [Pod Security Policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities)", "internal_id": "CKV_K8S_37/36f5cf81e8b1c88a343f85e1b8d6fdd2", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MinimizeCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with capabilities assigned.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/system-monitor/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 31, "ruleId": "CKV_K8S_37", "ruleName": "MinimizeCapabilities", "contextText": "31       - name: system-monitor\n", "snippetText": "31       - name: system-monitor\n        image: madhuakula/k8s-goat-system-monitor\n        resources:\n"}, "tags": [{"key": "cis_category", "value": "5.2.9", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Container should not be privileged.", "description": "CIS Benchmark: **5.2.1**\n\nMinimize the admission of privileged containers.\n\nPrivileged containers have access to all Linux Kernel capabilities and devices. A container running with full privileges can do almost everything that the host can do. This flag exists to allow special use-cases, like manipulating the network stack and accessing devices. There should be at least one PodSecurityPolicy (PSP) defined which does not permit privileged containers. If you need to run privileged containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.privileged` field is omitted or set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  hostNetwork: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privileged)", "internal_id": "CKV_K8S_16/12057ec38fce4c6d647f5340f4fda649", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PrivilegedContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Container should not be privileged.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/system-monitor/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 31, "ruleId": "CKV_K8S_16", "ruleName": "PrivilegedContainers", "contextText": "31       - name: system-monitor\n", "snippetText": "31       - name: system-monitor\n        image: madhuakula/k8s-goat-system-monitor\n        resources:\n"}, "tags": [{"key": "cis_category", "value": "5.2.1", "shiftleft_managed": false}]}, {"app": "kubernetes-goat", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/de4f6010e85a27ed1c3a2462e59c0f2a", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/system-monitor/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 31, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "31       - name: system-monitor\n", "snippetText": "31       - name: system-monitor\n        image: madhuakula/k8s-goat-system-monitor\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Readiness Probe Should be Configured.", "description": "Readiness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_9/4778ac630ce27ee327ffb16567f2c44b", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadinessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Readiness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/system-monitor/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 31, "ruleId": "CKV_K8S_9", "ruleName": "ReadinessProbe", "contextText": "31       - name: system-monitor\n", "snippetText": "31       - name: system-monitor\n        image: madhuakula/k8s-goat-system-monitor\n        resources:\n"}, "tags": []}, {"app": "kubernetes-goat", "type": "extscan", "title": "Prefer using secrets as files over secrets as environment variables.", "description": "CIS Benchmark: **5.4.1**\n\nKubernetes supports mounting secrets as data volumes or as environment variables. Minimize the use of environment variable secrets.\n\nIt is reasonably common for application code to log out its environment (particularly in the event of an error). This will include any secret values passed in as environment variables, so secrets can easily be exposed to any user or entity who has access to the logs.\n\n## Remediation\n\nRewrite application code to read secrets from mounted secret files, rather than from environment variables. Refer to the secrets management options offered by your cloud provider or a third-party secrets management solution.\n", "internal_id": "CKV_K8S_35/8481ac7c56a63641c6c6d80e926b434d", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Secrets", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "kubernetes-goat", "repositoryUri": "https://github.com/madhuakula/kubernetes-goat", "revisionId": "e4cb8b0e125986b99b3d3c04cbf477b899f189af", "branch": "master", "invokedBy": "Madhu Akula <madhu.akula@hotmail.com>", "pullRequest": false, "botUser": false}, "name": "Prefer using secrets as files over secrets as environment variables.", "tags": "Scan", "fileName": "file:///home/ec2-user/vulnerableapps/kubernetes-goat/scenarios/system-monitor/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 31, "ruleId": "CKV_K8S_35", "ruleName": "Secrets", "contextText": "31       - name: system-monitor\n", "snippetText": "31       - name: system-monitor\n        image: madhuakula/k8s-goat-system-monitor\n        resources:\n"}, "tags": [{"key": "cis_category", "value": "5.4.1", "shiftleft_managed": false}]}]}