{"tool": {"driver": {"name": "Secrets Audit", "rules": [{"id": "CWE-312", "help": {"text": "The application stores sensitive information in cleartext within a resource that might be accessible to another control sphere.\nBecause the information is stored in cleartext, attackers could potentially read it. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.", "markdown": "The application stores sensitive information in cleartext within a resource that might be accessible to another control sphere.\nBecause the information is stored in cleartext, attackers could potentially read it. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information."}, "name": "Files with keys and credentials", "properties": {"tags": ["Scan"], "precision": "very-high"}, "defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "The application stores sensitive information in cleartext within a resource that might be accessible to another control sphere."}, "helpUri": "https://cwe.mitre.org/data/definitions/312.html", "shortDescription": {"text": "Cleartext Storage of Sensitive Information."}}], "version": "1.0.0-scan", "fullName": "Secrets Audit"}}, "conversion": {"tool": {"driver": {"name": "@ShiftLeft/sast-scan"}}, "invocation": {"arguments": ["--config=/usr/local/src/lib/../credscan-config.toml", "--depth=5", "--repo-path=/app", "--redact", "--timeout=2m", "--report=/app/reports/credscan-report.json", "--report-format=json"], "executionSuccessful": true, "commandLine": "--config=/usr/local/src/lib/../credscan-config.toml --depth=5 --repo-path=/app --redact --timeout=2m --report=/app/reports/credscan-report.json --report-format=json", "endTimeUtc": "2020-11-03T07:57:01Z", "workingDirectory": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy"}}}, "invocations": [{"executionSuccessful": true, "endTimeUtc": "2020-11-03T07:57:01Z", "workingDirectory": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy"}}], "properties": {"metrics": {"total": 3, "critical": 0, "high": 3, "medium": 0, "low": 0}}, "results": [{"message": {"markdown": "", "text": "Credential in plaintext?\n\nRule: Files with keys and credentials\nLine: N/A\n\nCommit: 0055ef29e3a3f6cf40371555a216474b24f46bb4."}, "level": "error", "locations": [{"physicalLocation": {"region": {"snippet": {"text": "N/A"}, "startLine": 1}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/good/cutpasswd.py"}, "contextRegion": {"snippet": {"text": "N/A"}, "endLine": 1, "startLine": 1}}}], "properties": {"issue_confidence": "MEDIUM", "issue_severity": "HIGH"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "CWE-312", "ruleIndex": 0}, {"message": {"markdown": "", "text": "Credential in plaintext?\n\nRule: Files with keys and credentials\nLine: N/A\n\nCommit: 0055ef29e3a3f6cf40371555a216474b24f46bb4."}, "level": "error", "locations": [{"physicalLocation": {"region": {"snippet": {"text": "N/A"}, "startLine": 1}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/good/templates/user.chpasswd.html"}, "contextRegion": {"snippet": {"text": "N/A"}, "endLine": 1, "startLine": 1}}}], "properties": {"issue_confidence": "MEDIUM", "issue_severity": "HIGH"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "CWE-312", "ruleIndex": 0}, {"message": {"markdown": "", "text": "Credential in plaintext?\n\nRule: Files with keys and credentials\nLine: N/A\n\nCommit: 0f7bee37b9807c97da933c480e1d90d07243dc7a."}, "level": "error", "locations": [{"physicalLocation": {"region": {"snippet": {"text": "N/A"}, "startLine": 1}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/bad/cutpasswd.py"}, "contextRegion": {"snippet": {"text": "N/A"}, "endLine": 1, "startLine": 1}}}], "properties": {"issue_confidence": "MEDIUM", "issue_severity": "HIGH"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "CWE-312", "ruleIndex": 0}], "automationDetails": {"description": {"text": "Static Analysis Security Test results using @ShiftLeft/sast-scan"}, "guid": "c615e441-5a64-4c41-9a81-68b35a78245f"}, "versionControlProvenance": [{"branch": "master", "repositoryUri": "https://github.com/fportantier/vulpy", "revisionId": "5249cc8b05a1c37f6b2f757b1cf16a509c327122"}]}
{"tool": {"driver": {"name": "Python Security Analysis", "rules": [{"id": "taint-sqli", "help": {"text": "The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.\nWithout sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data. This can be used to alter query logic to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands. SQL injection has become a common issue with database-driven web sites. The flaw is easily detected, and easily exploited, and as such, any site or software package with even a minimal user base is likely to be subject to an attempted attack of this kind. This flaw depends on the fact that SQL makes no real distinction between the control and data planes.", "markdown": "The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.\nWithout sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data. This can be used to alter query logic to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands. SQL injection has become a common issue with database-driven web sites. The flaw is easily detected, and easily exploited, and as such, any site or software package with even a minimal user base is likely to be subject to an attempted attack of this kind. This flaw depends on the fact that SQL makes no real distinction between the control and data planes."}, "name": "SQL Injection", "properties": {"tags": ["Scan"], "precision": "high"}, "defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component."}, "helpUri": "https://cwe.mitre.org/data/definitions/89.html", "shortDescription": {"text": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')."}}, {"id": "flask-misconfiguration-static", "help": {"text": "The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\nWhen a resource is given a permissions setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data.", "markdown": "The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\nWhen a resource is given a permissions setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data."}, "name": "Security Misconfiguration", "properties": {"tags": ["Scan"], "precision": "high"}, "defaultConfiguration": {"level": "note"}, "fullDescription": {"text": "The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors."}, "helpUri": "https://cwe.mitre.org/data/definitions/732.html", "shortDescription": {"text": "Incorrect Permission Assignment for Critical Resource."}}, {"id": "flask-misconfiguration-recommended", "help": {"text": "The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\nWhen a resource is given a permissions setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data.", "markdown": "The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\nWhen a resource is given a permissions setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data."}, "name": "Security Misconfiguration", "properties": {"tags": ["Scan"], "precision": "high"}, "defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors."}, "helpUri": "https://cwe.mitre.org/data/definitions/732.html", "shortDescription": {"text": "Incorrect Permission Assignment for Critical Resource."}}, {"id": "flask-misconfiguration-controls", "help": {"text": "The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\nWhen a resource is given a permissions setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data.", "markdown": "The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\nWhen a resource is given a permissions setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data."}, "name": "Missing Security Controls", "properties": {"tags": ["Scan"], "precision": "high"}, "defaultConfiguration": {"level": "note"}, "fullDescription": {"text": "The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors."}, "helpUri": "https://cwe.mitre.org/data/definitions/732.html", "shortDescription": {"text": "Incorrect Permission Assignment for Critical Resource."}}], "version": "1.0.0-scan", "fullName": "Python Security Analysis"}}, "conversion": {"tool": {"driver": {"name": "@ShiftLeft/sast-scan"}}, "invocation": {"arguments": ["-j", "-a", "e", "-o", "/app/reports/taint-python-report.json"], "executionSuccessful": true, "commandLine": "-j -a e -o /app/reports/taint-python-report.json", "endTimeUtc": "2020-11-03T07:57:02Z", "workingDirectory": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy"}}}, "invocations": [{"executionSuccessful": true, "endTimeUtc": "2020-11-03T07:57:02Z", "workingDirectory": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy"}}], "properties": {"metrics": {"total": 35, "critical": 19, "high": 0, "medium": 8, "low": 8}}, "results": [{"message": {"markdown": "", "text": "SQL injection with user data from `username in libmfa.py:5` used to construct the query at `libmfa.py:12`."}, "level": "error", "locations": [{"physicalLocation": {"region": {"snippet": {"text": "def mfa_is_enabled(username):\n"}, "startLine": 5}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/good/libmfa.py"}, "contextRegion": {"snippet": {"text": "\ndef mfa_is_enabled(username):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"}, "endLine": 7, "startLine": 4}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "CRITICAL"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "taint-sqli", "ruleIndex": 0}, {"message": {"markdown": "", "text": "SQL injection with user data from `username in libmfa.py:20` used to construct the query at `libmfa.py:27`."}, "level": "error", "locations": [{"physicalLocation": {"region": {"snippet": {"text": "def mfa_disable(username):\n"}, "startLine": 20}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/good/libmfa.py"}, "contextRegion": {"snippet": {"text": "\ndef mfa_disable(username):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"}, "endLine": 22, "startLine": 19}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "CRITICAL"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "taint-sqli", "ruleIndex": 0}, {"message": {"markdown": "", "text": "SQL injection with user data from `username in libmfa.py:33` used to construct the query at `libmfa.py:43`."}, "level": "error", "locations": [{"physicalLocation": {"region": {"snippet": {"text": "def mfa_enable(username):\n"}, "startLine": 33}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/good/libmfa.py"}, "contextRegion": {"snippet": {"text": "\ndef mfa_enable(username):\n\n    #secret=pyotp.random_base32()\n"}, "endLine": 35, "startLine": 32}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "CRITICAL"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "taint-sqli", "ruleIndex": 0}, {"message": {"markdown": "", "text": "SQL injection with user data from `username in libmfa.py:49` used to construct the query at `libmfa.py:59`."}, "level": "error", "locations": [{"physicalLocation": {"region": {"snippet": {"text": "def mfa_get_secret(username):\n"}, "startLine": 49}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/good/libmfa.py"}, "contextRegion": {"snippet": {"text": "\ndef mfa_get_secret(username):\n\n    #secret=pyotp.random_base32()\n"}, "endLine": 51, "startLine": 48}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "CRITICAL"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "taint-sqli", "ruleIndex": 0}, {"message": {"markdown": "", "text": "SQL injection with user data from `username in libmfa.py:67` used to construct the query at `libmfa.py:78`."}, "level": "error", "locations": [{"physicalLocation": {"region": {"snippet": {"text": "def mfa_reset_secret(username):\n"}, "startLine": 67}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/good/libmfa.py"}, "contextRegion": {"snippet": {"text": "\ndef mfa_reset_secret(username):\n\n    secret=pyotp.random_base32()\n"}, "endLine": 69, "startLine": 66}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "CRITICAL"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "taint-sqli", "ruleIndex": 0}, {"message": {"markdown": "", "text": "SQL injection with user data from `username in libmfa.py:87` used to construct the query at `libmfa.py:59`."}, "level": "error", "locations": [{"physicalLocation": {"region": {"snippet": {"text": "def mfa_validate(username, otp):\n"}, "startLine": 87}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/good/libmfa.py"}, "contextRegion": {"snippet": {"text": "\ndef mfa_validate(username, otp):\n\n    secret = mfa_get_secret(username)\n"}, "endLine": 89, "startLine": 86}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "CRITICAL"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "taint-sqli", "ruleIndex": 0}, {"message": {"markdown": "", "text": "SQL injection with user data from `username in libposts.py:7` used to construct the query at `libposts.py:14`."}, "level": "error", "locations": [{"physicalLocation": {"region": {"snippet": {"text": "def get_posts(username):\n"}, "startLine": 7}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/good/libposts.py"}, "contextRegion": {"snippet": {"text": "\ndef get_posts(username):\n\n    conn = sqlite3.connect('db_posts.sqlite')\n"}, "endLine": 9, "startLine": 6}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "CRITICAL"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "taint-sqli", "ruleIndex": 0}, {"message": {"markdown": "", "text": "SQL injection with user data from `text in libposts.py:21` used to construct the query at `libposts.py:28`."}, "level": "error", "locations": [{"physicalLocation": {"region": {"snippet": {"text": "def post(username, text):\n"}, "startLine": 21}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/good/libposts.py"}, "contextRegion": {"snippet": {"text": "\ndef post(username, text):\n\n    conn = sqlite3.connect('db_posts.sqlite')\n"}, "endLine": 23, "startLine": 20}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "CRITICAL"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "taint-sqli", "ruleIndex": 0}, {"message": {"markdown": "", "text": "SQL injection with user data from `username in libuser.py:15` used to construct the query at `libuser.py:22`."}, "level": "error", "locations": [{"physicalLocation": {"region": {"snippet": {"text": "def login(username, password, **kwargs):\n"}, "startLine": 15}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/good/libuser.py"}, "contextRegion": {"snippet": {"text": "\ndef login(username, password, **kwargs):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"}, "endLine": 17, "startLine": 14}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "CRITICAL"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "taint-sqli", "ruleIndex": 0}, {"message": {"markdown": "", "text": "SQL injection with user data from `username in libuser.py:55` used to construct the query at `libuser.py:61`."}, "level": "error", "locations": [{"physicalLocation": {"region": {"snippet": {"text": "def user_create(username, password=None):\n"}, "startLine": 55}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/good/libuser.py"}, "contextRegion": {"snippet": {"text": "\ndef user_create(username, password=None):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"}, "endLine": 57, "startLine": 54}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "CRITICAL"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "taint-sqli", "ruleIndex": 0}, {"message": {"markdown": "", "text": "SQL injection with user data from `username in libmfa.py:5` used to construct the query at `libmfa.py:12`."}, "level": "error", "locations": [{"physicalLocation": {"region": {"snippet": {"text": "def mfa_is_enabled(username):\n"}, "startLine": 5}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/bad/libmfa.py"}, "contextRegion": {"snippet": {"text": "\ndef mfa_is_enabled(username):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"}, "endLine": 7, "startLine": 4}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "CRITICAL"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "taint-sqli", "ruleIndex": 0}, {"message": {"markdown": "", "text": "SQL injection with user data from `username in libmfa.py:20` used to construct the query at `libmfa.py:27`."}, "level": "error", "locations": [{"physicalLocation": {"region": {"snippet": {"text": "def mfa_disable(username):\n"}, "startLine": 20}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/bad/libmfa.py"}, "contextRegion": {"snippet": {"text": "\ndef mfa_disable(username):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"}, "endLine": 22, "startLine": 19}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "CRITICAL"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "taint-sqli", "ruleIndex": 0}, {"message": {"markdown": "", "text": "SQL injection with user data from `username in libmfa.py:33` used to construct the query at `libmfa.py:43`."}, "level": "error", "locations": [{"physicalLocation": {"region": {"snippet": {"text": "def mfa_enable(username):\n"}, "startLine": 33}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/bad/libmfa.py"}, "contextRegion": {"snippet": {"text": "\ndef mfa_enable(username):\n\n    #secret=pyotp.random_base32()\n"}, "endLine": 35, "startLine": 32}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "CRITICAL"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "taint-sqli", "ruleIndex": 0}, {"message": {"markdown": "", "text": "SQL injection with user data from `username in libmfa.py:49` used to construct the query at `libmfa.py:59`."}, "level": "error", "locations": [{"physicalLocation": {"region": {"snippet": {"text": "def mfa_get_secret(username):\n"}, "startLine": 49}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/bad/libmfa.py"}, "contextRegion": {"snippet": {"text": "\ndef mfa_get_secret(username):\n\n    #secret=pyotp.random_base32()\n"}, "endLine": 51, "startLine": 48}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "CRITICAL"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "taint-sqli", "ruleIndex": 0}, {"message": {"markdown": "", "text": "SQL injection with user data from `username in libmfa.py:67` used to construct the query at `libmfa.py:78`."}, "level": "error", "locations": [{"physicalLocation": {"region": {"snippet": {"text": "def mfa_reset_secret(username):\n"}, "startLine": 67}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/bad/libmfa.py"}, "contextRegion": {"snippet": {"text": "\ndef mfa_reset_secret(username):\n\n    secret=pyotp.random_base32()\n"}, "endLine": 69, "startLine": 66}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "CRITICAL"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "taint-sqli", "ruleIndex": 0}, {"message": {"markdown": "", "text": "SQL injection with user data from `username in libmfa.py:87` used to construct the query at `libmfa.py:59`."}, "level": "error", "locations": [{"physicalLocation": {"region": {"snippet": {"text": "def mfa_validate(username, otp):\n"}, "startLine": 87}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/bad/libmfa.py"}, "contextRegion": {"snippet": {"text": "\ndef mfa_validate(username, otp):\n\n    secret = mfa_get_secret(username)\n"}, "endLine": 89, "startLine": 86}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "CRITICAL"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "taint-sqli", "ruleIndex": 0}, {"message": {"markdown": "", "text": "SQL injection with user data from `username in libposts.py:7` used to construct the query at `libposts.py:14`."}, "level": "error", "locations": [{"physicalLocation": {"region": {"snippet": {"text": "def get_posts(username):\n"}, "startLine": 7}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/bad/libposts.py"}, "contextRegion": {"snippet": {"text": "\ndef get_posts(username):\n\n    conn = sqlite3.connect('db_posts.sqlite')\n"}, "endLine": 9, "startLine": 6}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "CRITICAL"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "taint-sqli", "ruleIndex": 0}, {"message": {"markdown": "", "text": "SQL injection with user data from `text in libposts.py:21` used to construct the query at `libposts.py:28`."}, "level": "error", "locations": [{"physicalLocation": {"region": {"snippet": {"text": "def post(username, text):\n"}, "startLine": 21}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/bad/libposts.py"}, "contextRegion": {"snippet": {"text": "\ndef post(username, text):\n\n    conn = sqlite3.connect('db_posts.sqlite')\n"}, "endLine": 23, "startLine": 20}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "CRITICAL"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "taint-sqli", "ruleIndex": 0}, {"message": {"markdown": "", "text": "SQL injection with user data from `password in libuser.py:20` used to construct the query at `libuser.py:25`."}, "level": "error", "locations": [{"physicalLocation": {"region": {"snippet": {"text": "def create(username, password):\n"}, "startLine": 20}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/bad/libuser.py"}, "contextRegion": {"snippet": {"text": "\ndef create(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"}, "endLine": 22, "startLine": 19}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "CRITICAL"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "taint-sqli", "ruleIndex": 0}, {"message": {"markdown": "", "text": "Security Misconfiguration with the config `SECRET_KEY` set to a static value `aaaa****`."}, "level": "note", "locations": [{"physicalLocation": {"region": {"snippet": {"text": "app.config['SECRET_KEY'] = 'aaaaaaa'\n"}, "startLine": 13}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/good/vulpy-ssl.py"}, "contextRegion": {"snippet": {"text": "app = Flask('vulpy')\napp.config['SECRET_KEY'] = 'aaaaaaa'\n\napp.register_blueprint(mod_hello, url_prefix='/hello')\n"}, "endLine": 15, "startLine": 12}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "LOW"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "flask-misconfiguration-static", "ruleIndex": 1}, {"message": {"markdown": "", "text": "Security Misconfiguration with the config `PREFERRED_URL_SCHEME` not set to the recommended value `https` for production use."}, "locations": [{"physicalLocation": {"region": {"snippet": {"text": "#!/usr/bin/env python3\n"}, "startLine": 1}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/good/vulpy-ssl.py"}, "contextRegion": {"snippet": {"text": "#!/usr/bin/env python3\n\nfrom flask import Flask, g, redirect, request\n\n"}, "endLine": 4, "startLine": 1}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "MEDIUM"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "flask-misconfiguration-recommended", "ruleIndex": 2}, {"message": {"markdown": "", "text": "Security Misconfiguration with the config `SESSION_COOKIE_SECURE` not set to the recommended value `True` for production use."}, "locations": [{"physicalLocation": {"region": {"snippet": {"text": "#!/usr/bin/env python3\n"}, "startLine": 1}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/good/vulpy-ssl.py"}, "contextRegion": {"snippet": {"text": "#!/usr/bin/env python3\n\nfrom flask import Flask, g, redirect, request\n\n"}, "endLine": 4, "startLine": 1}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "MEDIUM"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "flask-misconfiguration-recommended", "ruleIndex": 2}, {"message": {"markdown": "", "text": "Consider adding Flask-Security and Flask-Talisman security extensions to your Flask apps."}, "level": "note", "locations": [{"physicalLocation": {"region": {"snippet": {"text": "#!/usr/bin/env python3\n"}, "startLine": 1}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/good/vulpy-ssl.py"}, "contextRegion": {"snippet": {"text": "#!/usr/bin/env python3\n\nfrom flask import Flask, g, redirect, request\n\n"}, "endLine": 4, "startLine": 1}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "LOW"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "flask-misconfiguration-controls", "ruleIndex": 3}, {"message": {"markdown": "", "text": "Security Misconfiguration with the config `SECRET_KEY` set to a static value `123a****`."}, "level": "note", "locations": [{"physicalLocation": {"region": {"snippet": {"text": "app.config['SECRET_KEY'] = '123aa8a93bdde342c871564a62282af857bda14b3359fde95d0c5e4b321610c1'\n"}, "startLine": 17}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/good/vulpy.py"}, "contextRegion": {"snippet": {"text": "app = Flask('vulpy')\napp.config['SECRET_KEY'] = '123aa8a93bdde342c871564a62282af857bda14b3359fde95d0c5e4b321610c1'\n\napp.register_blueprint(mod_hello, url_prefix='/hello')\n"}, "endLine": 19, "startLine": 16}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "LOW"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "flask-misconfiguration-static", "ruleIndex": 1}, {"message": {"markdown": "", "text": "Security Misconfiguration with the config `PREFERRED_URL_SCHEME` not set to the recommended value `https` for production use."}, "locations": [{"physicalLocation": {"region": {"snippet": {"text": "#!/usr/bin/env python3\n"}, "startLine": 1}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/good/vulpy.py"}, "contextRegion": {"snippet": {"text": "#!/usr/bin/env python3\n\nfrom pathlib import Path\n\n"}, "endLine": 4, "startLine": 1}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "MEDIUM"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "flask-misconfiguration-recommended", "ruleIndex": 2}, {"message": {"markdown": "", "text": "Security Misconfiguration with the config `SESSION_COOKIE_SECURE` not set to the recommended value `True` for production use."}, "locations": [{"physicalLocation": {"region": {"snippet": {"text": "#!/usr/bin/env python3\n"}, "startLine": 1}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/good/vulpy.py"}, "contextRegion": {"snippet": {"text": "#!/usr/bin/env python3\n\nfrom pathlib import Path\n\n"}, "endLine": 4, "startLine": 1}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "MEDIUM"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "flask-misconfiguration-recommended", "ruleIndex": 2}, {"message": {"markdown": "", "text": "Consider adding Flask-Security and Flask-Talisman security extensions to your Flask apps."}, "level": "note", "locations": [{"physicalLocation": {"region": {"snippet": {"text": "#!/usr/bin/env python3\n"}, "startLine": 1}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/good/vulpy.py"}, "contextRegion": {"snippet": {"text": "#!/usr/bin/env python3\n\nfrom pathlib import Path\n\n"}, "endLine": 4, "startLine": 1}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "LOW"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "flask-misconfiguration-controls", "ruleIndex": 3}, {"message": {"markdown": "", "text": "Security Misconfiguration with the config `SECRET_KEY` set to a static value `aaaa****`."}, "level": "note", "locations": [{"physicalLocation": {"region": {"snippet": {"text": "app.config['SECRET_KEY'] = 'aaaaaaa'\n"}, "startLine": 13}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/bad/vulpy-ssl.py"}, "contextRegion": {"snippet": {"text": "app = Flask('vulpy')\napp.config['SECRET_KEY'] = 'aaaaaaa'\n\napp.register_blueprint(mod_hello, url_prefix='/hello')\n"}, "endLine": 15, "startLine": 12}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "LOW"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "flask-misconfiguration-static", "ruleIndex": 1}, {"message": {"markdown": "", "text": "Security Misconfiguration with the config `PREFERRED_URL_SCHEME` not set to the recommended value `https` for production use."}, "locations": [{"physicalLocation": {"region": {"snippet": {"text": "#!/usr/bin/env python3\n"}, "startLine": 1}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/bad/vulpy-ssl.py"}, "contextRegion": {"snippet": {"text": "#!/usr/bin/env python3\n\nfrom flask import Flask, g, redirect, request\n\n"}, "endLine": 4, "startLine": 1}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "MEDIUM"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "flask-misconfiguration-recommended", "ruleIndex": 2}, {"message": {"markdown": "", "text": "Security Misconfiguration with the config `SESSION_COOKIE_SECURE` not set to the recommended value `True` for production use."}, "locations": [{"physicalLocation": {"region": {"snippet": {"text": "#!/usr/bin/env python3\n"}, "startLine": 1}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/bad/vulpy-ssl.py"}, "contextRegion": {"snippet": {"text": "#!/usr/bin/env python3\n\nfrom flask import Flask, g, redirect, request\n\n"}, "endLine": 4, "startLine": 1}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "MEDIUM"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "flask-misconfiguration-recommended", "ruleIndex": 2}, {"message": {"markdown": "", "text": "Consider adding Flask-Security and Flask-Talisman security extensions to your Flask apps."}, "level": "note", "locations": [{"physicalLocation": {"region": {"snippet": {"text": "#!/usr/bin/env python3\n"}, "startLine": 1}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/bad/vulpy-ssl.py"}, "contextRegion": {"snippet": {"text": "#!/usr/bin/env python3\n\nfrom flask import Flask, g, redirect, request\n\n"}, "endLine": 4, "startLine": 1}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "LOW"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "flask-misconfiguration-controls", "ruleIndex": 3}, {"message": {"markdown": "", "text": "Security Misconfiguration with the config `SECRET_KEY` set to a static value `aaaa****`."}, "level": "note", "locations": [{"physicalLocation": {"region": {"snippet": {"text": "app.config['SECRET_KEY'] = 'aaaaaaa'\n"}, "startLine": 16}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/bad/vulpy.py"}, "contextRegion": {"snippet": {"text": "app = Flask('vulpy')\napp.config['SECRET_KEY'] = 'aaaaaaa'\n\napp.register_blueprint(mod_hello, url_prefix='/hello')\n"}, "endLine": 18, "startLine": 15}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "LOW"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "flask-misconfiguration-static", "ruleIndex": 1}, {"message": {"markdown": "", "text": "Security Misconfiguration with the config `PREFERRED_URL_SCHEME` not set to the recommended value `https` for production use."}, "locations": [{"physicalLocation": {"region": {"snippet": {"text": "#!/usr/bin/env python3\n"}, "startLine": 1}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/bad/vulpy.py"}, "contextRegion": {"snippet": {"text": "#!/usr/bin/env python3\n\nfrom pathlib import Path\n\n"}, "endLine": 4, "startLine": 1}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "MEDIUM"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "flask-misconfiguration-recommended", "ruleIndex": 2}, {"message": {"markdown": "", "text": "Security Misconfiguration with the config `SESSION_COOKIE_SECURE` not set to the recommended value `True` for production use."}, "locations": [{"physicalLocation": {"region": {"snippet": {"text": "#!/usr/bin/env python3\n"}, "startLine": 1}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/bad/vulpy.py"}, "contextRegion": {"snippet": {"text": "#!/usr/bin/env python3\n\nfrom pathlib import Path\n\n"}, "endLine": 4, "startLine": 1}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "MEDIUM"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "flask-misconfiguration-recommended", "ruleIndex": 2}, {"message": {"markdown": "", "text": "Consider adding Flask-Security and Flask-Talisman security extensions to your Flask apps."}, "level": "note", "locations": [{"physicalLocation": {"region": {"snippet": {"text": "#!/usr/bin/env python3\n"}, "startLine": 1}, "artifactLocation": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy/bad/vulpy.py"}, "contextRegion": {"snippet": {"text": "#!/usr/bin/env python3\n\nfrom pathlib import Path\n\n"}, "endLine": 4, "startLine": 1}}}], "properties": {"issue_confidence": "HIGH", "issue_severity": "LOW"}, "baselineState": "new", "partialFingerprints": {}, "ruleId": "flask-misconfiguration-controls", "ruleIndex": 3}], "automationDetails": {"description": {"text": "Static Analysis Security Test results using @ShiftLeft/sast-scan"}, "guid": "c76aa077-3772-4c54-8366-6e31d7b54cfa"}, "versionControlProvenance": [{"branch": "master", "repositoryUri": "https://github.com/fportantier/vulpy", "revisionId": "5249cc8b05a1c37f6b2f757b1cf16a509c327122"}]}
{"tool": {"driver": {"name": "Python Source Analyzer", "version": "1.0.0-scan", "fullName": "Python Source Analyzer"}}, "conversion": {"tool": {"driver": {"name": "@ShiftLeft/sast-scan"}}, "invocation": {"arguments": ["-r", "-a", "vuln", "-n", "3", "-s", "B101,B102,B105,B307,B308,B310,B322,B404,B601,B602,B603,B604,B605,B701,B702,B703", "-iii", "-ll", "-o", "/app/reports/source-python-report.json", "-f", "json", "-x", ".git,.svn,.mvn,.idea,.github,.hg,dist,obj,backup,docs,tests,test,test-packages,tmp,report,reports,node_modules,.terraform,.serverless,venv,.virtualenv,vendor,bower_components,.vscode,e2e,.pytest_cache,__pycache__,.storybook,.venv,.tox,examples,tutorials,samples,db_migrations,unittests,unittests_legacy,stubs", "/app"], "executionSuccessful": true, "commandLine": "-r -a vuln -n 3 -s B101,B102,B105,B307,B308,B310,B322,B404,B601,B602,B603,B604,B605,B701,B702,B703 -iii -ll -o /app/reports/source-python-report.json -f json -x .git,.svn,.mvn,.idea,.github,.hg,dist,obj,backup,docs,tests,test,test-packages,tmp,report,reports,node_modules,.terraform,.serverless,venv,.virtualenv,vendor,bower_components,.vscode,e2e,.pytest_cache,__pycache__,.storybook,.venv,.tox,examples,tutorials,samples,db_migrations,unittests,unittests_legacy,stubs /app", "endTimeUtc": "2020-11-03T07:57:03Z", "workingDirectory": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy"}}}, "invocations": [{"executionSuccessful": true, "endTimeUtc": "2020-11-03T07:57:03Z", "workingDirectory": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy"}}], "properties": {"metrics": {"total": 0, "critical": 0, "high": 0, "medium": 0, "low": 0}}, "results": [], "automationDetails": {"description": {"text": "Static Analysis Security Test results using @ShiftLeft/sast-scan"}, "guid": "208e1e1f-260e-43bb-94eb-202d42d47559"}, "versionControlProvenance": [{"branch": "master", "repositoryUri": "https://github.com/fportantier/vulpy", "revisionId": "5249cc8b05a1c37f6b2f757b1cf16a509c327122"}]}
{"tool": {"driver": {"name": "JavaScript Source Analyzer", "version": "1.0.0-scan", "fullName": "JavaScript Source Analyzer"}}, "conversion": {"tool": {"driver": {"name": "@ShiftLeft/sast-scan"}}, "invocation": {"arguments": ["--json", "--output", "/app/reports/source-js-report.json", "/app/bad/payloads/cookie.js", "/app/bad/payloads/keylogger.js", "/app/bad/payloads/payload.js", "/app/good/payloads/cookie.js", "/app/good/payloads/keylogger.js", "/app/good/payloads/payload.js"], "executionSuccessful": true, "commandLine": "--json --output /app/reports/source-js-report.json /app/bad/payloads/cookie.js /app/bad/payloads/keylogger.js /app/bad/payloads/payload.js /app/good/payloads/cookie.js /app/good/payloads/keylogger.js /app/good/payloads/payload.js", "endTimeUtc": "2020-11-03T07:57:19Z", "workingDirectory": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy"}}}, "invocations": [{"executionSuccessful": true, "endTimeUtc": "2020-11-03T07:57:19Z", "workingDirectory": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy"}}], "properties": {"metrics": {"total": 0, "critical": 0, "high": 0, "medium": 0, "low": 0}}, "results": [], "automationDetails": {"description": {"text": "Static Analysis Security Test results using @ShiftLeft/sast-scan"}, "guid": "5169049b-e688-47ae-9b23-e5f8fcbc2412"}, "versionControlProvenance": [{"branch": "master", "repositoryUri": "https://github.com/fportantier/vulpy", "revisionId": "5249cc8b05a1c37f6b2f757b1cf16a509c327122"}]}
{"tool": {"driver": {"name": "Shell Script Analysis", "version": "1.0.0-scan", "fullName": "Shell Script Analysis"}}, "conversion": {"tool": {"driver": {"name": "@ShiftLeft/sast-scan"}}, "invocation": {"arguments": ["-a", "--shell=bash", "-f", "json", "-S", "error", "--color=never", "/app/install-on-kali.sh"], "executionSuccessful": true, "commandLine": "-a --shell=bash -f json -S error --color=never /app/install-on-kali.sh", "endTimeUtc": "2020-11-03T07:57:19Z", "workingDirectory": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy"}}}, "invocations": [{"executionSuccessful": true, "endTimeUtc": "2020-11-03T07:57:19Z", "workingDirectory": {"uri": "file:///home/ec2-user/vulnerableapps/vulpy"}}], "properties": {"metrics": {"total": 0, "critical": 0, "high": 0, "medium": 0, "low": 0}}, "results": [], "automationDetails": {"description": {"text": "Static Analysis Security Test results using @ShiftLeft/sast-scan"}, "guid": "b14db9a7-8354-4cf9-bf50-05624df25b58"}, "versionControlProvenance": [{"branch": "master", "repositoryUri": "https://github.com/fportantier/vulpy", "revisionId": "5249cc8b05a1c37f6b2f757b1cf16a509c327122"}]}
